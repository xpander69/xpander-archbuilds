From 3f5f55ca5b4e55b6e9485b64b2e7c7f7b681c9d9 Mon Sep 17 00:00:00 2001
From: Henri Verbeet <hverbeet@codeweavers.com>
Date: Sat, 8 Dec 2012 19:28:54 +0100
Subject: [PATCH 014/127] wined3d: Introduce a command stream.
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/Makefile.in       |   1 +
 dlls/wined3d/cs.c              | 241 +++++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/device.c          |  14 +++
 dlls/wined3d/wined3d_main.c    |   9 ++
 dlls/wined3d/wined3d_private.h |  27 +++++
 5 files changed, 292 insertions(+)
 create mode 100644 dlls/wined3d/cs.c

diff --git a/dlls/wined3d/Makefile.in b/dlls/wined3d/Makefile.in
index b1051c2..f77f35d 100644
--- a/dlls/wined3d/Makefile.in
+++ b/dlls/wined3d/Makefile.in
@@ -7,6 +7,7 @@ C_SRCS = \
 	ati_fragment_shader.c \
 	buffer.c \
 	context.c \
+	cs.c \
 	device.c \
 	directx.c \
 	drawprim.c \
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
new file mode 100644
index 0000000..b5d0bc2
--- /dev/null
+++ b/dlls/wined3d/cs.c
@@ -0,0 +1,241 @@
+/*
+ * Copyright 2012 Henri Verbeet for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "config.h"
+#include "wined3d_private.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(d3d);
+
+enum wined3d_cs_op
+{
+    WINED3D_CS_OP_STOP,
+};
+
+struct wined3d_cs_stop
+{
+    enum wined3d_cs_op opcode;
+};
+
+static CRITICAL_SECTION wined3d_cs_list_mutex;
+static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
+{
+    0, 0, &wined3d_cs_list_mutex,
+    {&wined3d_cs_list_mutex_debug.ProcessLocksList,
+    &wined3d_cs_list_mutex_debug.ProcessLocksList},
+    0, 0, {(DWORD_PTR)(__FILE__ ": wined3d_cs_list_mutex")}
+};
+static CRITICAL_SECTION wined3d_cs_list_mutex = {&wined3d_cs_list_mutex_debug, -1, 0, 0, 0, 0};
+
+/* FIXME: The list synchronization probably isn't particularly fast. */
+static void wined3d_cs_list_enqueue(struct wined3d_cs_list *list, struct wined3d_cs_block *block)
+{
+    EnterCriticalSection(&wined3d_cs_list_mutex);
+    list_add_tail(&list->blocks, &block->entry);
+    LeaveCriticalSection(&wined3d_cs_list_mutex);
+}
+
+static struct wined3d_cs_block *wined3d_cs_list_dequeue(struct wined3d_cs_list *list)
+{
+    struct list *head;
+
+    EnterCriticalSection(&wined3d_cs_list_mutex);
+    if (!(head = list_head(&list->blocks)))
+    {
+        LeaveCriticalSection(&wined3d_cs_list_mutex);
+        return NULL;
+    }
+    list_remove(head);
+    LeaveCriticalSection(&wined3d_cs_list_mutex);
+
+    return LIST_ENTRY(head, struct wined3d_cs_block, entry);
+}
+
+static struct wined3d_cs_block *wined3d_cs_list_dequeue_blocking(struct wined3d_cs_list *list)
+{
+    struct wined3d_cs_block *block;
+
+    /* FIXME: Use an event to wait after a couple of spins. */
+    for (;;)
+    {
+        if ((block = wined3d_cs_list_dequeue(list)))
+            return block;
+    }
+}
+
+static void wined3d_cs_list_init(struct wined3d_cs_list *list)
+{
+    list_init(&list->blocks);
+}
+
+static struct wined3d_cs_block *wined3d_cs_get_thread_block(const struct wined3d_cs *cs)
+{
+    return TlsGetValue(cs->tls_idx);
+}
+
+static void wined3d_cs_set_thread_block(const struct wined3d_cs *cs, struct wined3d_cs_block *block)
+{
+    if (!TlsSetValue(cs->tls_idx, block))
+        ERR("Failed to set thread block.\n");
+}
+
+static void wined3d_cs_flush(struct wined3d_cs *cs)
+{
+    wined3d_cs_list_enqueue(&cs->exec_list, wined3d_cs_get_thread_block(cs));
+    wined3d_cs_set_thread_block(cs, NULL);
+}
+
+static struct wined3d_cs_block *wined3d_cs_get_block(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_block *block;
+
+    if (!(block = wined3d_cs_list_dequeue(&cs->free_list)))
+    {
+        if (!(block = HeapAlloc(GetProcessHeap(), 0, sizeof(*block))))
+        {
+            ERR("Failed to get new block.\n");
+            return NULL;
+        }
+    }
+
+    block->pos = 0;
+
+    return block;
+}
+
+static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
+{
+    struct wined3d_cs_block *block = wined3d_cs_get_thread_block(cs);
+    void *data;
+
+    if (!block || block->pos + size > sizeof(block->data))
+    {
+        if (block)
+            wined3d_cs_flush(cs);
+        block = wined3d_cs_get_block(cs);
+        wined3d_cs_set_thread_block(cs, block);
+    }
+
+    data = &block->data[block->pos];
+    block->pos += size;
+
+    return data;
+}
+
+/* FIXME: wined3d_device_uninit_3d() should either flush and wait, or be an
+ * OP itself. */
+static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_stop *op;
+
+    op = wined3d_cs_mt_require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_STOP;
+
+    wined3d_cs_flush(cs);
+}
+
+static DWORD WINAPI wined3d_cs_run(void *thread_param)
+{
+    struct wined3d_cs *cs = thread_param;
+
+    TRACE("Started.\n");
+
+    for (;;)
+    {
+        struct wined3d_cs_block *block;
+        enum wined3d_cs_op opcode;
+
+        block = wined3d_cs_list_dequeue_blocking(&cs->exec_list);
+        opcode = *(const enum wined3d_cs_op *)block->data;
+
+        if (opcode > WINED3D_CS_OP_STOP)
+            ERR("Invalid opcode %#x.\n", opcode);
+
+        wined3d_cs_list_enqueue(&cs->free_list, block);
+
+        goto done;
+    }
+
+done:
+    TRACE("Stopped.\n");
+    return 0;
+}
+
+/* We could also create a single thread for all of wined3d, instead of one for
+ * each device, at the cost of some extra overhead for each block. I'm not
+ * sure that we'd gain anything from that though. */
+struct wined3d_cs *wined3d_cs_create(void)
+{
+    struct wined3d_cs *cs;
+    DWORD ret;
+
+    if (!(cs = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*cs))))
+    {
+        ERR("Failed to allocate wined3d command stream memory.\n");
+        return NULL;
+    }
+
+    if ((cs->tls_idx = TlsAlloc()) == TLS_OUT_OF_INDEXES)
+    {
+        ERR("Failed to allocate cs TLS index, err %#x.\n", GetLastError());
+        HeapFree(GetProcessHeap(), 0, cs);
+        return NULL;
+    }
+
+    if (wined3d_settings.cs_multithreaded)
+    {
+        wined3d_cs_list_init(&cs->free_list);
+        wined3d_cs_list_init(&cs->exec_list);
+
+        if (!(cs->thread = CreateThread(NULL, 0, wined3d_cs_run, cs, 0, &ret)))
+        {
+            ERR("Failed to create wined3d command stream thread.\n");
+            if (!TlsFree(cs->tls_idx))
+                ERR("Failed to free cs TLS index, err %#x.\n", GetLastError());
+            HeapFree(GetProcessHeap(), 0, cs);
+            return NULL;
+        }
+    }
+
+    return cs;
+}
+
+void wined3d_cs_destroy(struct wined3d_cs *cs)
+{
+    DWORD ret;
+
+    if (wined3d_settings.cs_multithreaded)
+    {
+        wined3d_cs_emit_stop(cs);
+
+        ret = WaitForSingleObject(cs->thread, INFINITE);
+        CloseHandle(cs->thread);
+        if (ret != WAIT_OBJECT_0)
+            ERR("Wait failed (%#x).\n", ret);
+
+        /* FIXME: Cleanup the block lists on thread exit. */
+#if 0
+        wined3d_cs_list_cleanup(&cs->exec_list);
+        wined3d_cs_list_cleanup(&cs->free_list);
+#endif
+    }
+
+    if (!TlsFree(cs->tls_idx))
+        ERR("Failed to free cs TLS index, err %#x.\n", GetLastError());
+
+    HeapFree(GetProcessHeap(), 0, cs);
+}
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 5ab7b88..4618e83 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -484,6 +484,8 @@ ULONG CDECL wined3d_device_decref(struct wined3d_device *device)
     {
         UINT i;
 
+        wined3d_cs_destroy(device->cs);
+
         if (device->recording && wined3d_stateblock_decref(device->recording))
             FIXME("Something's still holding the recording stateblock.\n");
         device->recording = NULL;
@@ -4998,6 +5000,18 @@ HRESULT device_init(struct wined3d_device *device, struct wined3d *wined3d,
     }
     device->update_state = &device->state;
 
+    if (!(device->cs = wined3d_cs_create()))
+    {
+        WARN("Failed to create command stream.\n");
+        state_cleanup(&device->state);
+        for (i = 0; i < sizeof(device->multistate_funcs) / sizeof(device->multistate_funcs[0]); ++i)
+        {
+            HeapFree(GetProcessHeap(), 0, device->multistate_funcs[i]);
+        }
+        wined3d_decref(device->wined3d);
+        return E_FAIL;
+    }
+
     return WINED3D_OK;
 }
 
diff --git a/dlls/wined3d/wined3d_main.c b/dlls/wined3d/wined3d_main.c
index a897bdc..9abaac5 100644
--- a/dlls/wined3d/wined3d_main.c
+++ b/dlls/wined3d/wined3d_main.c
@@ -85,6 +85,7 @@ struct wined3d_settings wined3d_settings =
     ~0U,            /* No GS shader model limit by default. */
     ~0U,            /* No PS shader model limit by default. */
     FALSE,          /* 3D support enabled by default. */
+    FALSE,          /* No multithreaded CS by default. */
 };
 
 /* Do not call while under the GL lock. */
@@ -305,6 +306,14 @@ static BOOL wined3d_dll_init(HINSTANCE hInstDLL)
             TRACE("Disabling 3D support.\n");
             wined3d_settings.no_3d = TRUE;
         }
+        if (!get_config_key(hkey, appkey, "CSMT", buffer, size)
+                && !strcmp(buffer,"enabled"))
+        {
+            TRACE("Enabling multithreaded command stream.\n");
+            wined3d_settings.cs_multithreaded = TRUE;
+            TRACE("Enforcing strict draw ordering for multithreaded command stream.\n");
+            wined3d_settings.strict_draw_ordering = TRUE;
+        }
     }
 
     if (appkey) RegCloseKey( appkey );
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 05674e2..70ebfe5 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -265,6 +265,7 @@ struct wined3d_settings
     unsigned int max_sm_gs;
     unsigned int max_sm_ps;
     BOOL no_3d;
+    BOOL cs_multithreaded;
 };
 
 extern struct wined3d_settings wined3d_settings DECLSPEC_HIDDEN;
@@ -1959,6 +1960,9 @@ struct wined3d_device
     UINT dummy_texture_3d[MAX_COMBINED_SAMPLERS];
     UINT dummy_texture_cube[MAX_COMBINED_SAMPLERS];
 
+    /* Command stream */
+    struct wined3d_cs *cs;
+
     /* Context management */
     struct wined3d_context **contexts;
     UINT context_count;
@@ -2471,6 +2475,29 @@ HRESULT state_init(struct wined3d_state *state, const struct wined3d_d3d_info *d
 void state_init_default(struct wined3d_state *state, struct wined3d_device *device) DECLSPEC_HIDDEN;
 void state_unbind_resources(struct wined3d_state *state) DECLSPEC_HIDDEN;
 
+struct wined3d_cs_list
+{
+    struct list blocks;
+};
+
+struct wined3d_cs_block
+{
+    struct list entry;
+    UINT pos;
+    BYTE data[4000]; /* FIXME? The size is somewhat arbitrary. */
+};
+
+struct wined3d_cs
+{
+    HANDLE thread;
+    DWORD tls_idx;
+    struct wined3d_cs_list free_list;
+    struct wined3d_cs_list exec_list;
+};
+
+struct wined3d_cs *wined3d_cs_create(void) DECLSPEC_HIDDEN;
+void wined3d_cs_destroy(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
+
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
  * allows GetData on a created issue, but opengl doesn't
-- 
1.8.1.5

