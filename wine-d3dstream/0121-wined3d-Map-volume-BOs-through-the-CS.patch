From 10b27ff0eda3bc43f2d8f1bbabf529f3881b409c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Fri, 30 Aug 2013 19:12:04 +0200
Subject: [PATCH 121/127] wined3d: Map volume BOs through the CS
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 96 ++++++++++++++++++++++++++++++++++++++----
 dlls/wined3d/volume.c          | 39 ++---------------
 dlls/wined3d/wined3d_private.h |  3 ++
 3 files changed, 95 insertions(+), 43 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index e4f9e29..d95dc71 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -85,6 +85,8 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SURFACE_FLIP,
     WINED3D_CS_OP_BO_INIT,
     WINED3D_CS_OP_BO_DESTROY,
+    WINED3D_CS_OP_BO_MAP,
+    WINED3D_CS_OP_BO_UNMAP,
     WINED3D_CS_OP_VOLUME_LOAD_LOCATION,
     WINED3D_CS_OP_STOP,
 };
@@ -449,12 +451,20 @@ struct wined3d_cs_surface_flip
     struct wined3d_surface *surface, *override;
 };
 
-struct wined3d_cs_bo_init_destroy
+struct wined3d_cs_bo_misc
 {
     enum wined3d_cs_op opcode;
     struct wined3d_gl_bo *bo;
 };
 
+struct wined3d_cs_bo_map
+{
+    enum wined3d_cs_op opcode;
+    const struct wined3d_gl_bo *bo;
+    GLbitfield flags;
+    BYTE **ptr;
+};
+
 struct wined3d_cs_volume_load_location
 {
     enum wined3d_cs_op opcode;
@@ -2267,7 +2277,7 @@ void wined3d_cs_emit_surface_flip(struct wined3d_cs *cs, struct wined3d_surface
 
 static UINT wined3d_cs_exec_bo_init(struct wined3d_cs *cs, const void *data)
 {
-    const struct wined3d_cs_bo_init_destroy *op = data;
+    const struct wined3d_cs_bo_misc *op = data;
     struct wined3d_context *context = context_acquire(cs->device, NULL);
     const struct wined3d_gl_info *gl_info = context->gl_info;
     struct wined3d_gl_bo *bo = op->bo;
@@ -2280,16 +2290,13 @@ static UINT wined3d_cs_exec_bo_init(struct wined3d_cs *cs, const void *data)
     GL_EXTCALL(glBindBufferARB(bo->type_hint, 0));
     checkGLcall("Create buffer object");
 
-    /* Temporary flush until map calls are moved into the cs. */
-    gl_info->gl_ops.gl.p_glFlush();
-
     context_release(context);
     return sizeof(*op);
 }
 
 void wined3d_cs_emit_bo_init(struct wined3d_cs *cs, struct wined3d_gl_bo *bo)
 {
-    struct wined3d_cs_bo_init_destroy *op;
+    struct wined3d_cs_bo_misc *op;
 
     op = cs->ops->require_space_prio(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_BO_INIT;
@@ -2301,7 +2308,7 @@ void wined3d_cs_emit_bo_init(struct wined3d_cs *cs, struct wined3d_gl_bo *bo)
 
 static UINT wined3d_cs_exec_bo_destroy(struct wined3d_cs *cs, const void *data)
 {
-    const struct wined3d_cs_bo_init_destroy *op = data;
+    const struct wined3d_cs_bo_misc *op = data;
     struct wined3d_context *context = context_acquire(cs->device, NULL);
     const struct wined3d_gl_info *gl_info = context->gl_info;
 
@@ -2316,7 +2323,7 @@ static UINT wined3d_cs_exec_bo_destroy(struct wined3d_cs *cs, const void *data)
 
 void wined3d_cs_emit_bo_destroy(struct wined3d_cs *cs, struct wined3d_gl_bo *bo)
 {
-    struct wined3d_cs_bo_init_destroy *op;
+    struct wined3d_cs_bo_misc *op;
 
     op = cs->ops->require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_BO_DESTROY;
@@ -2325,6 +2332,77 @@ void wined3d_cs_emit_bo_destroy(struct wined3d_cs *cs, struct wined3d_gl_bo *bo)
     cs->ops->submit(cs, sizeof(*op));
 }
 
+static UINT wined3d_cs_exec_bo_map(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_bo_map *op = data;
+    const struct wined3d_gl_bo *bo = op->bo;
+    struct wined3d_context *context = context_acquire(cs->device, NULL);
+    const struct wined3d_gl_info *gl_info = context->gl_info;
+
+    GL_EXTCALL(glBindBufferARB(bo->type_hint, bo->name));
+    if (bo->type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
+        context_invalidate_state(context, STATE_INDEXBUFFER);
+
+    if (gl_info->supported[ARB_MAP_BUFFER_RANGE])
+        *op->ptr = GL_EXTCALL(glMapBufferRange(bo->type_hint, 0, bo->size, op->flags));
+    else
+        *op->ptr = GL_EXTCALL(glMapBufferARB(bo->type_hint, 0));
+
+    GL_EXTCALL(glBindBufferARB(bo->type_hint, 0));
+    checkGLcall("Map PBO");
+
+    context_release(context);
+
+    return sizeof(*op);
+}
+
+BYTE *wined3d_cs_emit_bo_map(struct wined3d_cs *cs, const struct wined3d_gl_bo *bo, GLbitfield flags)
+{
+    struct wined3d_cs_bo_map *op;
+    BYTE *ret;
+
+    op = cs->ops->require_space_prio(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_BO_MAP;
+    op->bo = bo;
+    op->flags = flags;
+    op->ptr = &ret;
+
+    cs->ops->submit_prio(cs, sizeof(*op));
+    cs->ops->finish_prio(cs);
+
+    return ret;
+}
+
+static UINT wined3d_cs_exec_bo_unmap(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_bo_misc *op = data;
+    const struct wined3d_gl_bo *bo = op->bo;
+    struct wined3d_context *context = context_acquire(cs->device, NULL);
+    const struct wined3d_gl_info *gl_info = context->gl_info;
+
+    GL_EXTCALL(glBindBufferARB(bo->type_hint, bo->name));
+    if (bo->type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
+        context_invalidate_state(context, STATE_INDEXBUFFER);
+    GL_EXTCALL(glUnmapBufferARB(bo->type_hint));
+    GL_EXTCALL(glBindBufferARB(bo->type_hint, 0));
+    checkGLcall("Map BO");
+
+    context_release(context);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_bo_unmap(struct wined3d_cs *cs, struct wined3d_gl_bo *bo)
+{
+    struct wined3d_cs_bo_misc *op;
+
+    op = cs->ops->require_space_prio(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_BO_UNMAP;
+    op->bo = bo;
+
+    cs->ops->submit_prio(cs, sizeof(*op));
+}
+
 static UINT wined3d_cs_exec_volume_load_location(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_volume_load_location *op = data;
@@ -2414,6 +2492,8 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SURFACE_FLIP           */ wined3d_cs_exec_surface_flip,
     /* WINED3D_CS_OP_BO_INIT                */ wined3d_cs_exec_bo_init,
     /* WINED3D_CS_OP_BO_DESTROY             */ wined3d_cs_exec_bo_destroy,
+    /* WINED3D_CS_OP_BO_MAP                 */ wined3d_cs_exec_bo_map,
+    /* WINED3D_CS_OP_BO_UNMAP               */ wined3d_cs_exec_bo_unmap,
     /* WINED3D_CS_OP_VOLUME_LOAD_LOCATION   */ wined3d_cs_exec_volume_load_location,
 };
 
diff --git a/dlls/wined3d/volume.c b/dlls/wined3d/volume.c
index a34369e..5912f49 100644
--- a/dlls/wined3d/volume.c
+++ b/dlls/wined3d/volume.c
@@ -549,8 +549,7 @@ HRESULT CDECL wined3d_volume_map(struct wined3d_volume *volume,
      * data transfers to finish */
     if (volume->flags & WINED3D_VFLAG_PBO)
     {
-        struct wined3d_context *context;
-        const struct wined3d_gl_info *gl_info;
+        GLbitfield mapflags = wined3d_resource_gl_map_flags(flags);
 
         wined3d_volume_prepare_pbo(volume);
 
@@ -559,27 +558,8 @@ HRESULT CDECL wined3d_volume_map(struct wined3d_volume *volume,
         else if (!(volume->locations & WINED3D_LOCATION_BUFFER))
             wined3d_cs_emit_volume_load_location(device->cs, volume, WINED3D_LOCATION_BUFFER);
 
-        context = context_acquire(device, NULL);
-        gl_info = context->gl_info;
-
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, volume->resource.map_buffer->name));
-
-        if (gl_info->supported[ARB_MAP_BUFFER_RANGE])
-        {
-            GLbitfield mapflags = wined3d_resource_gl_map_flags(flags);
-            mapflags &= ~GL_MAP_FLUSH_EXPLICIT_BIT;
-            base_memory = GL_EXTCALL(glMapBufferRange(GL_PIXEL_UNPACK_BUFFER_ARB,
-                    0, volume->resource.size, mapflags));
-        }
-        else
-        {
-            base_memory = GL_EXTCALL(glMapBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
-        }
-
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
-        checkGLcall("Map PBO");
-
-        context_release(context);
+        mapflags &= ~GL_MAP_FLUSH_EXPLICIT_BIT;
+        base_memory = wined3d_cs_emit_bo_map(device->cs, volume->resource.map_buffer, mapflags);
     }
     else
     {
@@ -657,18 +637,7 @@ HRESULT CDECL wined3d_volume_unmap(struct wined3d_volume *volume)
     }
 
     if (volume->flags & WINED3D_VFLAG_PBO)
-    {
-        struct wined3d_device *device = volume->resource.device;
-        struct wined3d_context *context = context_acquire(device, NULL);
-        const struct wined3d_gl_info *gl_info = context->gl_info;
-
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, volume->resource.map_buffer->name));
-        GL_EXTCALL(glUnmapBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB));
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
-        checkGLcall("Unmap PBO");
-
-        context_release(context);
-    }
+        wined3d_cs_emit_bo_unmap(volume->resource.device->cs, volume->resource.map_buffer);
 
     volume->flags &= ~WINED3D_VFLAG_LOCKED;
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 8abf806..7a41b8e 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2651,6 +2651,9 @@ void wined3d_cs_emit_surface_flip(struct wined3d_cs *cs, struct wined3d_surface
         struct wined3d_surface *override) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_bo_init(struct wined3d_cs *cs, struct wined3d_gl_bo *bo) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_bo_destroy(struct wined3d_cs *cs, struct wined3d_gl_bo *bo) DECLSPEC_HIDDEN;
+BYTE *wined3d_cs_emit_bo_map(struct wined3d_cs *cs, const struct wined3d_gl_bo *bo,
+        GLbitfield flags) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_bo_unmap(struct wined3d_cs *cs, struct wined3d_gl_bo *bo) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_volume_load_location(struct wined3d_cs *cs, struct wined3d_volume *volume,
         DWORD location) DECLSPEC_HIDDEN;
 
-- 
1.8.1.5

