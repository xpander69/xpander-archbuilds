From 25738a8060540f2575cac66ac4349a2e3305a3b0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 28 Aug 2013 14:30:31 +0200
Subject: [PATCH 049/127] wined3d: Send texture stage state updates through the
 command stream.
Reply-To: wine-devel <wine-devel@winehq.org>

TODO: Completely remove lowest_disabled_stage from the state
structure.
---
 dlls/wined3d/cs.c              | 95 ++++++++++++++++++++++++++++++++++++++++--
 dlls/wined3d/device.c          | 52 +----------------------
 dlls/wined3d/stateblock.c      | 10 -----
 dlls/wined3d/wined3d_private.h |  2 +
 4 files changed, 94 insertions(+), 65 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index f16ee7b..5174875 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -44,6 +44,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_VERTEX_SHADER,
     WINED3D_CS_OP_SET_PIXEL_SHADER,
     WINED3D_CS_OP_SET_RENDER_STATE,
+    WINED3D_CS_OP_SET_TEXTURE_STATE,
     WINED3D_CS_OP_STOP,
 };
 
@@ -192,6 +193,14 @@ struct wined3d_cs_set_render_state
     DWORD value;
 };
 
+struct wined3d_cs_set_texture_state
+{
+    enum wined3d_cs_op opcode;
+    UINT stage;
+    enum wined3d_texture_stage_state state;
+    DWORD value;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -434,8 +443,6 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
     memcpy(cs->state.ps_consts_i, op->state.ps_consts_i, sizeof(cs->state.ps_consts_i));
 
     memcpy(cs->state.sampler_states, op->state.sampler_states, sizeof(cs->state.sampler_states));
-    memcpy(cs->state.texture_states, op->state.texture_states, sizeof(cs->state.texture_states));
-    cs->state.lowest_disabled_stage = op->state.lowest_disabled_stage;
 
     memcpy(cs->state.transforms, op->state.transforms, sizeof(cs->state.transforms));
     memcpy(cs->state.clip_planes, op->state.clip_planes, sizeof(cs->state.clip_planes));
@@ -475,8 +482,6 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
     memcpy(op->state.ps_consts_i, state->ps_consts_i, sizeof(op->state.ps_consts_i));
 
     memcpy(op->state.sampler_states, state->sampler_states, sizeof(op->state.sampler_states));
-    memcpy(op->state.texture_states, state->texture_states, sizeof(op->state.texture_states));
-    op->state.lowest_disabled_stage = state->lowest_disabled_stage;
 
     memcpy(op->state.transforms, state->transforms, sizeof(op->state.transforms));
     memcpy(op->state.clip_planes, state->clip_planes, sizeof(op->state.clip_planes));
@@ -962,6 +967,87 @@ void wined3d_cs_emit_set_render_state(struct wined3d_cs *cs, enum wined3d_render
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_set_texture_state(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_texture_state *op = data;
+    struct wined3d_device *device = cs->device;
+    UINT stage = op->stage;
+    enum wined3d_texture_stage_state state = op->state;
+    DWORD value = op->value;
+    DWORD old_value;
+    const struct wined3d_d3d_info *d3d_info = &device->adapter->d3d_info;
+
+    old_value = cs->state.texture_states[stage][state];
+    cs->state.texture_states[stage][state] = value;
+
+    /* Colorop change above lowest disabled stage? That won't change
+     * anything in the GL setup. Changes in other states are important on
+     * disabled stages too. */
+    if (stage > cs->state.lowest_disabled_stage
+            && device->StateTable[STATE_TEXTURESTAGE(0, state)].representative
+            == STATE_TEXTURESTAGE(0, WINED3D_TSS_COLOR_OP))
+        goto done;
+
+    if (state == WINED3D_TSS_COLOR_OP)
+    {
+        unsigned int i;
+
+        if (value == WINED3D_TOP_DISABLE && old_value != WINED3D_TOP_DISABLE)
+        {
+            /* Previously enabled stage disabled now. Make sure to dirtify
+             * all enabled stages above stage, they have to be disabled.
+             *
+             * The current stage is dirtified below. */
+            for (i = stage + 1; i < cs->state.lowest_disabled_stage; ++i)
+            {
+                TRACE("Additionally dirtifying stage %u.\n", i);
+                device_invalidate_state(device, STATE_TEXTURESTAGE(i, WINED3D_TSS_COLOR_OP));
+            }
+            cs->state.lowest_disabled_stage = stage;
+            TRACE("New lowest disabled: %u.\n", stage);
+        }
+        else if (value != WINED3D_TOP_DISABLE && old_value == WINED3D_TOP_DISABLE)
+        {
+            /* Previously disabled stage enabled. Stages above it may need
+             * enabling. Stage must be lowest_disabled_stage here, if it's
+             * bigger success is returned above, and stages below the lowest
+             * disabled stage can't be enabled (because they are enabled
+             * already).
+             *
+             * Again stage stage doesn't need to be dirtified here, it is
+             * handled below. */
+            for (i = stage + 1; i < d3d_info->limits.ffp_blend_stages; ++i)
+            {
+                if (cs->state.texture_states[i][WINED3D_TSS_COLOR_OP] == WINED3D_TOP_DISABLE)
+                    break;
+                TRACE("Additionally dirtifying stage %u due to enable.\n", i);
+                device_invalidate_state(device, STATE_TEXTURESTAGE(i, WINED3D_TSS_COLOR_OP));
+            }
+            cs->state.lowest_disabled_stage = i;
+            TRACE("New lowest disabled: %u.\n", i);
+        }
+    }
+
+    device_invalidate_state(device, STATE_TEXTURESTAGE(stage, state));
+
+done:
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_set_texture_state(struct wined3d_cs *cs, UINT stage,
+        enum wined3d_texture_stage_state state, DWORD value)
+{
+    struct wined3d_cs_set_texture_state *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SET_TEXTURE_STATE;
+    op->stage = stage;
+    op->state = state;
+    op->value = value;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -985,6 +1071,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_VERTEX_SHADER      */ wined3d_cs_exec_set_vertex_shader,
     /* WINED3D_CS_OP_SET_PIXEL_SHADER       */ wined3d_cs_exec_set_pixel_shader,
     /* WINED3D_CS_OP_SET_RENDER_STATE       */ wined3d_cs_exec_set_render_state,
+    /* WINED3D_CS_OP_SET_TEXTURE_STATE      */ wined3d_cs_exec_set_texture_state,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index e47b8bf..4b4b57f 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -3083,57 +3083,7 @@ void CDECL wined3d_device_set_texture_stage_state(struct wined3d_device *device,
         return;
     }
 
-    if (stage > device->state.lowest_disabled_stage
-            && device->StateTable[STATE_TEXTURESTAGE(0, state)].representative
-            == STATE_TEXTURESTAGE(0, WINED3D_TSS_COLOR_OP))
-    {
-        /* Colorop change above lowest disabled stage? That won't change
-         * anything in the GL setup. Changes in other states are important on
-         * disabled stages too. */
-        return;
-    }
-
-    if (state == WINED3D_TSS_COLOR_OP)
-    {
-        unsigned int i;
-
-        if (value == WINED3D_TOP_DISABLE && old_value != WINED3D_TOP_DISABLE)
-        {
-            /* Previously enabled stage disabled now. Make sure to dirtify
-             * all enabled stages above stage, they have to be disabled.
-             *
-             * The current stage is dirtified below. */
-            for (i = stage + 1; i < device->state.lowest_disabled_stage; ++i)
-            {
-                TRACE("Additionally dirtifying stage %u.\n", i);
-                device_invalidate_state(device, STATE_TEXTURESTAGE(i, WINED3D_TSS_COLOR_OP));
-            }
-            device->state.lowest_disabled_stage = stage;
-            TRACE("New lowest disabled: %u.\n", stage);
-        }
-        else if (value != WINED3D_TOP_DISABLE && old_value == WINED3D_TOP_DISABLE)
-        {
-            /* Previously disabled stage enabled. Stages above it may need
-             * enabling. Stage must be lowest_disabled_stage here, if it's
-             * bigger success is returned above, and stages below the lowest
-             * disabled stage can't be enabled (because they are enabled
-             * already).
-             *
-             * Again stage stage doesn't need to be dirtified here, it is
-             * handled below. */
-            for (i = stage + 1; i < d3d_info->limits.ffp_blend_stages; ++i)
-            {
-                if (device->update_state->texture_states[i][WINED3D_TSS_COLOR_OP] == WINED3D_TOP_DISABLE)
-                    break;
-                TRACE("Additionally dirtifying stage %u due to enable.\n", i);
-                device_invalidate_state(device, STATE_TEXTURESTAGE(i, WINED3D_TSS_COLOR_OP));
-            }
-            device->state.lowest_disabled_stage = i;
-            TRACE("New lowest disabled: %u.\n", i);
-        }
-    }
-
-    device_invalidate_state(device, STATE_TEXTURESTAGE(stage, state));
+    wined3d_cs_emit_set_texture_state(device->cs, stage, state, value);
 }
 
 DWORD CDECL wined3d_device_get_texture_stage_state(const struct wined3d_device *device,
diff --git a/dlls/wined3d/stateblock.c b/dlls/wined3d/stateblock.c
index cc989d4..9af5c5b 100644
--- a/dlls/wined3d/stateblock.c
+++ b/dlls/wined3d/stateblock.c
@@ -1196,16 +1196,6 @@ void CDECL wined3d_stateblock_apply(const struct wined3d_stateblock *stateblock)
         wined3d_device_set_clip_plane(device, i, &stateblock->state.clip_planes[i]);
     }
 
-    stateblock->device->state.lowest_disabled_stage = MAX_TEXTURES - 1;
-    for (i = 0; i < MAX_TEXTURES - 1; ++i)
-    {
-        if (stateblock->device->state.texture_states[i][WINED3D_TSS_COLOR_OP] == WINED3D_TOP_DISABLE)
-        {
-            stateblock->device->state.lowest_disabled_stage = i;
-            break;
-        }
-    }
-
     TRACE("Applied stateblock %p.\n", stateblock);
 }
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 507957d..2749856 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2549,6 +2549,8 @@ void wined3d_cs_emit_set_vertex_shader(struct wined3d_cs *cs, struct wined3d_sha
 void wined3d_cs_emit_set_pixel_shader(struct wined3d_cs *cs, struct wined3d_shader *shader) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_render_state(struct wined3d_cs *cs, enum wined3d_render_state state,
         DWORD value) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_set_texture_state(struct wined3d_cs *cs, UINT stage,
+        enum wined3d_texture_stage_state state, DWORD value) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

