From e1c73d3289805e89a151cb8aee790a1f26288a5d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 28 Aug 2013 13:48:05 +0200
Subject: [PATCH 042/127] wined3d: Send vertex buffer binding updates through
 the command stream.
Reply-To: wine-devel <wine-devel@winehq.org>

Based on a patch by Henri Verbeet.
---
 dlls/wined3d/cs.c              | 63 ++++++++++++++++++++++++++++++++++++++++--
 dlls/wined3d/device.c          | 22 ++++-----------
 dlls/wined3d/wined3d_private.h |  2 ++
 3 files changed, 68 insertions(+), 19 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index b9458e5..dede651 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -37,6 +37,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_SCISSOR_RECT,
     WINED3D_CS_OP_SET_DEPTH_STENCIL,
     WINED3D_CS_OP_SET_VERTEX_DECLARATION,
+    WINED3D_CS_OP_SET_STREAM_SOURCE,
     WINED3D_CS_OP_STOP,
 };
 
@@ -141,6 +142,15 @@ struct wined3d_cs_set_vertex_declaration
     struct wined3d_vertex_declaration *declaration;
 };
 
+struct wined3d_cs_set_stream_source
+{
+    enum wined3d_cs_op opcode;
+    UINT stream_idx;
+    struct wined3d_buffer *buffer;
+    UINT offset;
+    UINT stride;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -359,12 +369,17 @@ void wined3d_cs_emit_draw(struct wined3d_cs *cs, UINT start_idx, UINT index_coun
 
 static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const void *data)
 {
+    unsigned int i;
     const struct wined3d_cs_stateblock *op = data;
 
     /* Don't memcpy the entire struct, we'll remove single items as we add dedicated
      * ops for setting states */
     memcpy(cs->state.stream_output, op->state.stream_output, sizeof(cs->state.stream_output));
-    memcpy(cs->state.streams, op->state.streams, sizeof(cs->state.streams));
+    for (i = 0; i < sizeof(cs->state.streams) / sizeof(*cs->state.streams); i++)
+    {
+        cs->state.streams[i].frequency = op->state.streams[i].frequency;
+        cs->state.streams[i].flags = op->state.streams[i].flags;
+    }
     cs->state.index_buffer = op->state.index_buffer;
     cs->state.index_format = op->state.index_format;
     cs->state.base_vertex_index = op->state.base_vertex_index;
@@ -405,6 +420,7 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
 
 void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct wined3d_state *state)
 {
+    unsigned int i;
     struct wined3d_cs_stateblock *op;
 
     op = cs->ops->require_space(cs, sizeof(*op));
@@ -413,7 +429,11 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
     /* Don't memcpy the entire struct, we'll remove single items as we add dedicated
      * ops for setting states */
     memcpy(op->state.stream_output, state->stream_output, sizeof(op->state.stream_output));
-    memcpy(op->state.streams, state->streams, sizeof(op->state.streams));
+    for (i = 0; i < sizeof(cs->state.streams) / sizeof(*cs->state.streams); i++)
+    {
+        op->state.streams[i].frequency = state->streams[i].frequency;
+        op->state.streams[i].flags = state->streams[i].flags;
+    }
     op->state.index_buffer = state->index_buffer;
     op->state.index_format = state->index_format;
     op->state.base_vertex_index = state->base_vertex_index;
@@ -694,6 +714,44 @@ void wined3d_cs_emit_set_vertex_declaration(struct wined3d_cs *cs,
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_set_stream_source(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_stream_source *op = data;
+    struct wined3d_stream_state *stream;
+    struct wined3d_buffer *prev;
+
+    stream = &cs->state.streams[op->stream_idx];
+    prev = stream->buffer;
+    stream->buffer = op->buffer;
+    stream->offset = op->offset;
+    stream->stride = op->stride;
+
+    if (op->buffer)
+        InterlockedIncrement(&op->buffer->resource.bind_count);
+
+    if (prev)
+        InterlockedDecrement(&prev->resource.bind_count);
+
+    device_invalidate_state(cs->device, STATE_STREAMSRC);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_set_stream_source(struct wined3d_cs *cs, UINT stream_idx,
+        struct wined3d_buffer *buffer, UINT offset, UINT stride)
+{
+    struct wined3d_cs_set_stream_source *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SET_STREAM_SOURCE;
+    op->stream_idx = stream_idx;
+    op->buffer = buffer;
+    op->offset = offset;
+    op->stride = stride;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -710,6 +768,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_SCISSOR_RECT       */ wined3d_cs_exec_set_scissor_rect,
     /* WINED3D_CS_OP_SET_DEPTH_STENCIL      */ wined3d_cs_exec_set_depth_stencil,
     /* WINED3D_CS_OP_SET_VERTEX_DECLARATION */ wined3d_cs_exec_set_vertex_declaration,
+    /* WINED3D_CS_OP_SET_STREAM_SOURCE      */ wined3d_cs_exec_set_stream_source,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 08215b4..5964ae3 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -1198,29 +1198,17 @@ HRESULT CDECL wined3d_device_set_stream_source(struct wined3d_device *device, UI
         stream->offset = offset;
     }
 
+    if (buffer)
+        wined3d_buffer_incref(buffer);
+
     /* Handle recording of state blocks. */
     if (device->recording)
-    {
         TRACE("Recording... not performing anything.\n");
-        if (buffer)
-            wined3d_buffer_incref(buffer);
-        if (prev_buffer)
-            wined3d_buffer_decref(prev_buffer);
-        return WINED3D_OK;
-    }
+    else
+        wined3d_cs_emit_set_stream_source(device->cs, stream_idx, buffer, offset, stride);
 
-    if (buffer)
-    {
-        InterlockedIncrement(&buffer->resource.bind_count);
-        wined3d_buffer_incref(buffer);
-    }
     if (prev_buffer)
-    {
-        InterlockedDecrement(&prev_buffer->resource.bind_count);
         wined3d_buffer_decref(prev_buffer);
-    }
-
-    device_invalidate_state(device, STATE_STREAMSRC);
 
     return WINED3D_OK;
 }
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 62156d1..f1c5acb 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2538,6 +2538,8 @@ void wined3d_cs_emit_set_depth_stencil(struct wined3d_cs *cs,
         struct wined3d_surface *depth_stencil) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_vertex_declaration(struct wined3d_cs *cs,
         struct wined3d_vertex_declaration *declaration) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_set_stream_source(struct wined3d_cs *cs, UINT stream_idx,
+        struct wined3d_buffer *buffer, UINT offset, UINT stride) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

