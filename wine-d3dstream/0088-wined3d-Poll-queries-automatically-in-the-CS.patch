From cda49cf41160b1bcadcc81b22d23fdc715f57423 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Sat, 6 Jul 2013 21:28:59 +0200
Subject: [PATCH 088/127] wined3d: Poll queries automatically in the CS
Reply-To: wine-devel <wine-devel@winehq.org>

Hopefully this is faster than a communication roundtrip between the main
and worker threads. The priority queue can be removed again as well.
---
 dlls/wined3d/cs.c              |  72 +++++++++------------
 dlls/wined3d/query.c           | 140 ++++++++++++++++++++++++++---------------
 dlls/wined3d/wined3d_private.h |   6 +-
 3 files changed, 125 insertions(+), 93 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 6c78161..60e8333 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -73,7 +73,6 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SWAP_MEM,
     WINED3D_CS_OP_BUFFER_INVALIDATE_RANGE,
     WINED3D_CS_OP_QUERY_ISSUE,
-    WINED3D_CS_OP_QUERY_GET_DATA,
     WINED3D_CS_OP_STOP,
 };
 
@@ -374,16 +373,6 @@ struct wined3d_cs_query_issue
     DWORD flags;
 };
 
-struct wined3d_cs_query_get_data
-{
-    enum wined3d_cs_op opcode;
-    struct wined3d_query *query;
-    void *data;
-    UINT data_size;
-    DWORD flags;
-    HRESULT *ret;
-};
-
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
@@ -1878,8 +1867,9 @@ static UINT wined3d_cs_exec_query_issue(struct wined3d_cs *cs, const void *data)
 
     query->query_ops->query_issue(query, op->flags);
 
-    if (op->flags & WINED3DISSUE_END)
-        InterlockedIncrement(&query->counter_worker);
+    if (wined3d_settings.cs_multithreaded && op->flags & WINED3DISSUE_END
+            && list_empty(&query->poll_list_entry))
+        list_add_tail(&cs->query_poll_list, &query->poll_list_entry);
 
     return sizeof(*op);
 }
@@ -1896,33 +1886,6 @@ void wined3d_cs_emit_query_issue(struct wined3d_cs *cs, struct wined3d_query *qu
     cs->ops->submit(cs, sizeof(*op));
 }
 
-static UINT wined3d_cs_exec_query_get_data(struct wined3d_cs *cs, const void *data)
-{
-    const struct wined3d_cs_query_get_data *op = data;
-    struct wined3d_query *query = op->query;
-
-    *op->ret = query->query_ops->query_get_data(query, op->data, op->data_size, op->flags);
-
-    return sizeof(*op);
-}
-
-void wined3d_cs_emit_query_get_data(struct wined3d_cs *cs, struct wined3d_query *query, void *data,
-        UINT data_size, DWORD flags, HRESULT *ret)
-{
-    struct wined3d_cs_query_get_data *op;
-
-    op = cs->ops->require_space_prio(cs, sizeof(*op));
-    op->opcode = WINED3D_CS_OP_QUERY_GET_DATA;
-    op->query = query;
-    op->data = data;
-    op->data_size = data_size;
-    op->flags = flags;
-    op->ret = ret;
-
-    cs->ops->submit_prio(cs, sizeof(*op));
-    cs->ops->finish_prio(cs);
-}
-
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                    */ wined3d_cs_exec_nop,
@@ -1975,7 +1938,6 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SWAP_MEM               */ wined3d_cs_exec_swap_mem,
     /* WINED3D_CS_OP_BUFFER_INVALIDATE_RANGE*/ wined3d_cs_exec_buffer_invalidate_bo_range,
     /* WINED3D_CS_OP_QUERY_ISSUE            */ wined3d_cs_exec_query_issue,
-    /* WINED3D_CS_OP_QUERY_GET_DATA         */ wined3d_cs_exec_query_get_data,
 };
 
 static inline void *_wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size, BOOL prio)
@@ -2154,18 +2116,46 @@ void wined3d_cs_switch_onscreen_ds(struct wined3d_cs *cs,
     wined3d_surface_incref(cs->onscreen_depth_stencil);
 }
 
+static inline void poll_queries(struct wined3d_cs *cs)
+{
+    struct wined3d_query *query, *cursor;
+
+    LIST_FOR_EACH_ENTRY_SAFE(query, cursor, &cs->query_poll_list, struct wined3d_query, poll_list_entry)
+    {
+        BOOL ret;
+
+        ret = query->query_ops->query_poll(query);
+        if (ret)
+        {
+            list_remove(&query->poll_list_entry);
+            list_init(&query->poll_list_entry);
+            InterlockedIncrement(&query->counter_retrieved);
+        }
+    }
+}
+
 static DWORD WINAPI wined3d_cs_run(void *thread_param)
 {
     struct wined3d_cs *cs = thread_param;
     enum wined3d_cs_op opcode;
     LONG tail;
     struct wined3d_cs_queue *queue;
+    char poll = 0;
 
     TRACE("Started.\n");
 
+    list_init(&cs->query_poll_list);
     cs->thread_id = GetCurrentThreadId();
     for (;;)
     {
+        if (poll == 10)
+        {
+            poll = 0;
+            poll_queries(cs);
+        }
+        else
+            poll++;
+
         if (*((volatile LONG *)&cs->prio_queue.head) != cs->prio_queue.tail)
         {
             queue = &cs->prio_queue;
diff --git a/dlls/wined3d/query.c b/dlls/wined3d/query.c
index 7b28c93..5226afb 100644
--- a/dlls/wined3d/query.c
+++ b/dlls/wined3d/query.c
@@ -241,6 +241,15 @@ ULONG CDECL wined3d_query_decref(struct wined3d_query *query)
 
     if (!refcount)
     {
+        if (wined3d_settings.cs_multithreaded)
+        {
+            struct wined3d_device *device = query->device;
+
+            FIXME("waiting for cs\n");
+            wined3d_cs_emit_glfinish(device->cs);
+            device->cs->ops->finish(device->cs);
+        }
+
         /* Queries are specific to the GL context that created them. Not
          * deleting the query will obviously leak it, but that's still better
          * than potentially deleting a different query with the same id in this
@@ -267,20 +276,10 @@ ULONG CDECL wined3d_query_decref(struct wined3d_query *query)
 HRESULT CDECL wined3d_query_get_data(struct wined3d_query *query,
         void *data, UINT data_size, DWORD flags)
 {
-    HRESULT hr;
     TRACE("query %p, data %p, data_size %u, flags %#x.\n",
             query, data, data_size, flags);
 
-    if (query->counter_main != query->counter_worker)
-    {
-        TRACE("D3DISSUE_END command not submitted to GL yet\n");
-        return S_FALSE;
-    }
-
-    wined3d_cs_emit_query_get_data(query->device->cs, query, data, data_size,
-            flags, &hr);
-
-    return hr;
+    return query->query_ops->query_get_data(query, data, data_size, flags);
 }
 
 UINT CDECL wined3d_query_get_data_size(const struct wined3d_query *query)
@@ -304,16 +303,10 @@ HRESULT CDECL wined3d_query_issue(struct wined3d_query *query, DWORD flags)
 static HRESULT wined3d_occlusion_query_ops_get_data(struct wined3d_query *query,
         void *pData, DWORD dwSize, DWORD flags)
 {
-    struct wined3d_occlusion_query *oq = query->extendedData;
     struct wined3d_device *device = query->device;
     const struct wined3d_gl_info *gl_info = &device->adapter->gl_info;
-    struct wined3d_context *context;
-    DWORD* data = pData;
-    GLuint available;
-    GLuint samples;
-    HRESULT res;
-
-    TRACE("(%p) : type D3DQUERY_OCCLUSION, pData %p, dwSize %#x, flags %#x.\n", query, pData, dwSize, flags);
+    struct wined3d_occlusion_query *oq = query->extendedData;
+    DWORD *data = pData;
 
     if (!oq->context)
         query->state = QUERY_CREATED;
@@ -326,6 +319,8 @@ static HRESULT wined3d_occlusion_query_ops_get_data(struct wined3d_query *query,
         return S_OK;
     }
 
+    TRACE("(%p) : type D3DQUERY_OCCLUSION, pData %p, dwSize %#x, flags %#x.\n", query, pData, dwSize, flags);
+
     if (query->state == QUERY_BUILDING)
     {
         /* Msdn says this returns an error, but our tests show that S_FALSE is returned */
@@ -340,11 +335,37 @@ static HRESULT wined3d_occlusion_query_ops_get_data(struct wined3d_query *query,
         return S_OK;
     }
 
+    if (!wined3d_settings.cs_multithreaded)
+    {
+        if (!query->query_ops->query_poll(query))
+            return S_FALSE;
+    }
+    else if (query->counter_main != query->counter_retrieved)
+    {
+        return S_FALSE;
+    }
+
+    if (data)
+        *data = oq->samples;
+
+    return S_OK;
+}
+
+static BOOL wined3d_occlusion_query_ops_poll(struct wined3d_query *query)
+{
+    struct wined3d_occlusion_query *oq = query->extendedData;
+    struct wined3d_device *device = query->device;
+    const struct wined3d_gl_info *gl_info = &device->adapter->gl_info;
+    struct wined3d_context *context;
+    GLuint available;
+    GLuint samples;
+    BOOL ret;
+
     if (oq->context->tid != GetCurrentThreadId())
     {
         FIXME("%p Wrong thread, returning 1.\n", query);
-        *data = 1;
-        return S_OK;
+        oq->samples = 1;
+        return TRUE;
     }
 
     context = context_acquire(query->device, oq->context->current_rt);
@@ -355,64 +376,78 @@ static HRESULT wined3d_occlusion_query_ops_get_data(struct wined3d_query *query,
 
     if (available)
     {
-        if (data)
-        {
-            GL_EXTCALL(glGetQueryObjectuivARB(oq->id, GL_QUERY_RESULT_ARB, &samples));
-            checkGLcall("glGetQueryObjectuivARB(GL_QUERY_RESULT)");
-            TRACE("Returning %d samples.\n", samples);
-            *data = samples;
-        }
-        res = S_OK;
+        GL_EXTCALL(glGetQueryObjectuivARB(oq->id, GL_QUERY_RESULT_ARB, &samples));
+        checkGLcall("glGetQueryObjectuivARB(GL_QUERY_RESULT)");
+        TRACE("Returning %d samples.\n", samples);
+        oq->samples = samples;
+        ret = TRUE;
     }
     else
     {
-        res = S_FALSE;
+        ret = FALSE;
     }
 
     context_release(context);
 
-    return res;
+    return ret;
 }
 
-static HRESULT wined3d_event_query_ops_get_data(struct wined3d_query *query,
-        void *pData, DWORD dwSize, DWORD flags)
+static BOOL wined3d_event_query_ops_poll(struct wined3d_query *query)
 {
     struct wined3d_event_query *event_query = query->extendedData;
-    BOOL *data = pData;
     enum wined3d_event_query_result ret;
 
-    TRACE("query %p, pData %p, dwSize %#x, flags %#x.\n", query, pData, dwSize, flags);
-
-    if (!pData || !dwSize) return S_OK;
-    if (!event_query)
-    {
-        WARN("Event query not supported by GL, reporting GPU idle.\n");
-        *data = TRUE;
-        return S_OK;
-    }
-
     ret = wined3d_event_query_test(event_query, query->device);
     switch(ret)
     {
         case WINED3D_EVENT_QUERY_OK:
         case WINED3D_EVENT_QUERY_NOT_STARTED:
-            *data = TRUE;
-            break;
+            return TRUE;
 
         case WINED3D_EVENT_QUERY_WAITING:
-            *data = FALSE;
-            break;
+            return FALSE;
 
         case WINED3D_EVENT_QUERY_WRONG_THREAD:
             FIXME("(%p) Wrong thread, reporting GPU idle.\n", query);
-            *data = TRUE;
-            break;
+            return TRUE;
 
         case WINED3D_EVENT_QUERY_ERROR:
             ERR("The GL event query failed, returning D3DERR_INVALIDCALL\n");
-            return WINED3DERR_INVALIDCALL;
+            return TRUE;
+
+        default:
+            ERR("Unexpected wined3d_event_query_test result %u\n", ret);
+            return TRUE;
+    }
+}
+
+static HRESULT wined3d_event_query_ops_get_data(struct wined3d_query *query,
+        void *pData, DWORD dwSize, DWORD flags)
+{
+    struct wined3d_event_query *event_query = query->extendedData;
+    BOOL *data = pData;
+    enum wined3d_event_query_result ret;
+
+    TRACE("query %p, pData %p, dwSize %#x, flags %#x.\n", query, pData, dwSize, flags);
+
+    if (!pData || !dwSize) return S_OK;
+    if (!event_query)
+    {
+        WARN("Event query not supported by GL, reporting GPU idle.\n");
+        *data = TRUE;
+        return S_OK;
     }
 
+    if (!wined3d_settings.cs_multithreaded)
+        ret = query->query_ops->query_poll(query);
+    else if (query->counter_main != query->counter_retrieved)
+        ret = FALSE;
+    else
+        ret = TRUE;
+
+    if (data)
+        *data = ret;
+
     return S_OK;
 }
 
@@ -534,12 +569,14 @@ static void wined3d_occlusion_query_ops_issue(struct wined3d_query *query, DWORD
 static const struct wined3d_query_ops event_query_ops =
 {
     wined3d_event_query_ops_get_data,
+    wined3d_event_query_ops_poll,
     wined3d_event_query_ops_issue,
 };
 
 static const struct wined3d_query_ops occlusion_query_ops =
 {
     wined3d_occlusion_query_ops_get_data,
+    wined3d_occlusion_query_ops_poll,
     wined3d_occlusion_query_ops_issue,
 };
 
@@ -608,6 +645,7 @@ static HRESULT query_init(struct wined3d_query *query, struct wined3d_device *de
     query->state = QUERY_CREATED;
     query->device = device;
     query->ref = 1;
+    list_init(&query->poll_list_entry);
 
     return WINED3D_OK;
 }
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index d591bff..a875709 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -1022,6 +1022,7 @@ struct wined3d_occlusion_query
     struct list entry;
     GLuint id;
     struct wined3d_context *context;
+    DWORD samples;
 };
 
 union wined3d_gl_query_object
@@ -2513,6 +2514,7 @@ struct wined3d_cs
     struct wined3d_device *device;
     struct wined3d_surface *onscreen_depth_stencil;
     struct wined3d_state state;
+    struct list query_poll_list;
 };
 
 struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device) DECLSPEC_HIDDEN;
@@ -2608,6 +2610,7 @@ enum query_state {
 struct wined3d_query_ops
 {
     HRESULT (*query_get_data)(struct wined3d_query *query, void *data, DWORD data_size, DWORD flags);
+    BOOL (*query_poll)(struct wined3d_query *query);
     void (*query_issue)(struct wined3d_query *query, DWORD flags);
 };
 
@@ -2621,7 +2624,8 @@ struct wined3d_query
     DWORD data_size;
     void                     *extendedData;
 
-    LONG                     counter_main, counter_worker;
+    LONG                     counter_main, counter_retrieved;
+    struct list              poll_list_entry;
 };
 
 /* TODO: Add tests and support for FLOAT16_4 POSITIONT, D3DCOLOR position, other
-- 
1.8.1.5

