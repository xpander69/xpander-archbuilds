From 6b22f6abd5fbb2becc918aa7e7a7dd7972ee382b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Sat, 6 Jul 2013 15:59:11 +0200
Subject: [PATCH 079/127] wined3d: Separate buffer map write and draw read
 memory pointers
Reply-To: wine-devel <wine-devel@winehq.org>

TODO: Think about making this generic for all resources.
---
 dlls/wined3d/buffer.c          | 9 +++++++--
 dlls/wined3d/wined3d_private.h | 1 +
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 0503414..3da92b0 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -198,6 +198,7 @@ static void buffer_create_buffer_object(struct wined3d_buffer *This, struct wine
         wined3d_resource_free_sysmem(This->resource.heap_memory);
         This->resource.allocatedMemory = NULL;
         This->resource.heap_memory = NULL;
+        This->map_mem = NULL;
     }
 
     return;
@@ -500,6 +501,7 @@ BYTE *buffer_get_sysmem(struct wined3d_buffer *This, struct wined3d_context *con
 
     This->resource.heap_memory = wined3d_resource_allocate_sysmem(This->resource.size);
     This->resource.allocatedMemory = This->resource.heap_memory;
+    This->map_mem = This->resource.allocatedMemory;
 
     if (This->buffer_type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
         context_invalidate_state(context, STATE_INDEXBUFFER);
@@ -1040,6 +1042,7 @@ HRESULT CDECL wined3d_buffer_map(struct wined3d_buffer *buffer, UINT offset, UIN
                     }
                     TRACE("New pointer is %p.\n", buffer->resource.allocatedMemory);
                 }
+                buffer->map_mem = buffer->resource.allocatedMemory;
                 context_release(context);
             }
         }
@@ -1070,9 +1073,9 @@ HRESULT CDECL wined3d_buffer_map(struct wined3d_buffer *buffer, UINT offset, UIN
         device->cs->ops->finish(device->cs);
     }
 
-    *data = buffer->resource.allocatedMemory + offset;
+    *data = buffer->map_mem + offset;
 
-    TRACE("Returning memory at %p (base %p, offset %u).\n", *data, buffer->resource.allocatedMemory, offset);
+    TRACE("Returning memory at %p (base %p, offset %u).\n", *data, buffer->map_mem, offset);
     /* TODO: check Flags compatibility with buffer->currentDesc.Usage (see MSDN) */
 
     return WINED3D_OK;
@@ -1141,6 +1144,7 @@ void CDECL wined3d_buffer_unmap(struct wined3d_buffer *buffer)
         context_release(context);
 
         buffer->resource.allocatedMemory = NULL;
+        buffer->map_mem = NULL;
         buffer_clear_dirty_areas(buffer);
     }
 }
@@ -1174,6 +1178,7 @@ static HRESULT buffer_init(struct wined3d_buffer *buffer, struct wined3d_device
         return hr;
     }
     buffer->buffer_type_hint = bind_hint;
+    buffer->map_mem = buffer->resource.allocatedMemory;
 
     TRACE("size %#x, usage %#x, format %s, memory @ %p, iface @ %p.\n", buffer->resource.size, buffer->resource.usage,
             debug_d3dformat(buffer->resource.format->id), buffer->resource.allocatedMemory, buffer);
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index c3f07b0..e609b5a 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2629,6 +2629,7 @@ struct wined3d_map_range
 struct wined3d_buffer
 {
     struct wined3d_resource resource;
+    BYTE *map_mem;
 
     struct wined3d_buffer_desc desc;
 
-- 
1.8.1.5

