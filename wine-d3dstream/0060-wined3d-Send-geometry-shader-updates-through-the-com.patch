From aaa66d5cc9651504f468665e606d2fde1e0c86ed Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 10 Apr 2013 16:33:14 +0200
Subject: [PATCH 060/127] wined3d: Send geometry shader updates through the
 command stream
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 27 +++++++++++++++++++++++----
 dlls/wined3d/device.c          | 11 ++++++-----
 dlls/wined3d/wined3d_private.h |  1 +
 3 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index b3fd9bb..7408402 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -47,6 +47,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_TEXTURE,
     WINED3D_CS_OP_SET_VERTEX_SHADER,
     WINED3D_CS_OP_SET_PIXEL_SHADER,
+    WINED3D_CS_OP_SET_GEOMETRY_SHADER,
     WINED3D_CS_OP_SET_RENDER_STATE,
     WINED3D_CS_OP_SET_TEXTURE_STATE,
     WINED3D_CS_OP_SET_SAMPLER_STATE,
@@ -524,8 +525,6 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
      * ops for setting states */
     memcpy(cs->state.stream_output, op->state.stream_output, sizeof(cs->state.stream_output));
 
-    cs->state.geometry_shader = op->state.geometry_shader;
-
     memcpy(cs->state.lights, op->state.lights, sizeof(cs->state.lights));
 
     return sizeof(*op);
@@ -542,8 +541,6 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
      * ops for setting states */
     memcpy(op->state.stream_output, state->stream_output, sizeof(op->state.stream_output));
 
-    op->state.geometry_shader = state->geometry_shader;
-
     /* FIXME: This is not ideal. CS is still running synchronously, so this is ok.
      * It will go away soon anyway. */
     memcpy(op->state.lights, state->lights, sizeof(op->state.lights));
@@ -1110,6 +1107,27 @@ void wined3d_cs_emit_set_pixel_shader(struct wined3d_cs *cs, struct wined3d_shad
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_set_geometry_shader(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_shader *op = data;
+
+    cs->state.geometry_shader = op->shader;
+    device_invalidate_state(cs->device, STATE_GEOMETRY_SHADER);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_set_geometry_shader(struct wined3d_cs *cs, struct wined3d_shader *shader)
+{
+    struct wined3d_cs_set_shader *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SET_GEOMETRY_SHADER;
+    op->shader = shader;
+
+    cs->ops->submit(cs);
+}
+
 static UINT wined3d_cs_exec_set_render_state(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_render_state *op = data;
@@ -1502,6 +1520,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_TEXTURE            */ wined3d_cs_exec_set_texture,
     /* WINED3D_CS_OP_SET_VERTEX_SHADER      */ wined3d_cs_exec_set_vertex_shader,
     /* WINED3D_CS_OP_SET_PIXEL_SHADER       */ wined3d_cs_exec_set_pixel_shader,
+    /* WINED3D_CS_OP_SET_GEOMETRY_SHADER    */ wined3d_cs_exec_set_geometry_shader,
     /* WINED3D_CS_OP_SET_RENDER_STATE       */ wined3d_cs_exec_set_render_state,
     /* WINED3D_CS_OP_SET_TEXTURE_STATE      */ wined3d_cs_exec_set_texture_state,
     /* WINED3D_CS_OP_SET_SAMPLER_STATE      */ wined3d_cs_exec_set_sampler_state,
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 5144a8d..e56656b 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -2600,17 +2600,18 @@ void CDECL wined3d_device_set_geometry_shader(struct wined3d_device *device, str
 
     TRACE("device %p, shader %p.\n", device, shader);
 
+    if (device->recording || shader == prev)
+        return;
+
     if (shader)
         wined3d_shader_incref(shader);
-    if (prev)
-        wined3d_shader_decref(prev);
 
     device->update_state->geometry_shader = shader;
 
-    if (device->recording || shader == prev)
-        return;
+    wined3d_cs_emit_set_geometry_shader(device->cs, shader);
 
-    device_invalidate_state(device, STATE_GEOMETRY_SHADER);
+    if (prev)
+        wined3d_shader_decref(prev);
 }
 
 struct wined3d_shader * CDECL wined3d_device_get_geometry_shader(const struct wined3d_device *device)
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index c2d672f..69691a0 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2552,6 +2552,7 @@ void wined3d_cs_emit_set_index_buffer(struct wined3d_cs *cs, struct wined3d_buff
 void wined3d_cs_emit_set_texture(struct wined3d_cs *cs, UINT stage, struct wined3d_texture *texture) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_vertex_shader(struct wined3d_cs *cs, struct wined3d_shader *shader) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_pixel_shader(struct wined3d_cs *cs, struct wined3d_shader *shader) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_set_geometry_shader(struct wined3d_cs *cs, struct wined3d_shader *shader) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_render_state(struct wined3d_cs *cs, enum wined3d_render_state state,
         DWORD value) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_texture_state(struct wined3d_cs *cs, UINT stage,
-- 
1.8.1.5

