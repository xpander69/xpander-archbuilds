From 708aa2cc4da1357185b1fd3d8e8215f9da3423f0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Thu, 4 Jul 2013 22:08:12 +0200
Subject: [PATCH 071/127] wined3d: Send surface maps through the command stream
Reply-To: wine-devel <wine-devel@winehq.org>

Slow version only. Good enough to dodge some nvidia bugs in the ddraw
tests.
---
 dlls/wined3d/cs.c              | 78 ++++++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/surface.c         | 21 +++---------
 dlls/wined3d/wined3d_private.h |  3 ++
 3 files changed, 85 insertions(+), 17 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index d4b27ce..5bc51f5 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -66,6 +66,8 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_LIGHT_ENABLE,
     WINED3D_CS_OP_BLT,
     WINED3D_CS_OP_COLOR_FILL,
+    WINED3D_CS_OP_SURFACE_MAP,
+    WINED3D_CS_OP_SURFACE_UNMAP,
     WINED3D_CS_OP_STOP,
 };
 
@@ -324,6 +326,21 @@ struct wined3d_cs_color_fill
     struct wined3d_color color;
 };
 
+struct wined3d_cs_surface_map
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_surface *surface;
+    RECT rect;
+    DWORD flags;
+    BOOL has_rect;
+};
+
+struct wined3d_cs_surface_unmap
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_surface *surface;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -1740,6 +1757,65 @@ void wined3d_cs_emit_color_fill(struct wined3d_cs *cs, struct wined3d_surface *s
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_surface_map(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_surface_map *op = data;
+    struct wined3d_surface *surface = op->surface;
+    const RECT *r = op->has_rect ? &op->rect : NULL;
+
+    surface->surface_ops->surface_map(surface, r, op->flags);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_surface_map(struct wined3d_cs *cs, struct wined3d_surface *surface,
+        const RECT *rect, DWORD flags)
+{
+    struct wined3d_cs_surface_map *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SURFACE_MAP;
+    op->surface = surface;
+    if (rect)
+    {
+        op->rect = *rect;
+        op->has_rect = TRUE;
+    }
+    else
+    {
+        op->has_rect = FALSE;
+    }
+    op->flags = flags;
+
+    cs->ops->finish(cs);
+
+    if (flags & (WINED3D_MAP_NOOVERWRITE | WINED3D_MAP_DISCARD))
+    {
+        FIXME("Dynamic surface map is inefficient\n");
+    }
+}
+
+static UINT wined3d_cs_exec_surface_unmap(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_surface_unmap *op = data;
+    struct wined3d_surface *surface = op->surface;
+
+    surface->surface_ops->surface_unmap(surface);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_surface_unmap(struct wined3d_cs *cs, struct wined3d_surface *surface)
+{
+    struct wined3d_cs_surface_unmap *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SURFACE_UNMAP;
+    op->surface = surface;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -1785,6 +1861,8 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_LIGHT_ENABLE       */ wined3d_cs_exec_set_light_enable,
     /* WINED3D_CS_OP_BLT                    */ wined3d_cs_exec_blt,
     /* WINED3D_CS_OP_COLOR_FILL             */ wined3d_cs_exec_color_fill,
+    /* WINED3D_CS_OP_SURFACE_MAP            */ wined3d_cs_exec_surface_map,
+    /* WINED3D_CS_OP_SURFACE_UNMAP          */ wined3d_cs_exec_surface_unmap,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/surface.c b/dlls/wined3d/surface.c
index 87c898f..77cc520 100644
--- a/dlls/wined3d/surface.c
+++ b/dlls/wined3d/surface.c
@@ -892,13 +892,6 @@ static void surface_map(struct wined3d_surface *surface, const RECT *rect, DWORD
     TRACE("surface %p, rect %s, flags %#x.\n",
             surface, wine_dbgstr_rect(rect), flags);
 
-    if (wined3d_settings.cs_multithreaded)
-    {
-        FIXME("Waiting for cs.\n");
-        wined3d_cs_emit_glfinish(device->cs);
-        device->cs->ops->finish(device->cs);
-    }
-
     if (flags & WINED3D_MAP_DISCARD)
     {
         TRACE("WINED3D_MAP_DISCARD flag passed, marking SYSMEM as up to date.\n");
@@ -3864,6 +3857,7 @@ struct wined3d_surface * CDECL wined3d_surface_from_resource(struct wined3d_reso
 
 HRESULT CDECL wined3d_surface_unmap(struct wined3d_surface *surface)
 {
+    const struct wined3d_device *device = surface->resource.device;
     TRACE("surface %p.\n", surface);
 
     if (!surface->resource.map_count)
@@ -3873,7 +3867,7 @@ HRESULT CDECL wined3d_surface_unmap(struct wined3d_surface *surface)
     }
     --surface->resource.map_count;
 
-    surface->surface_ops->surface_unmap(surface);
+    wined3d_cs_emit_surface_unmap(device->cs, surface);
 
     return WINED3D_OK;
 }
@@ -3882,18 +3876,11 @@ HRESULT CDECL wined3d_surface_map(struct wined3d_surface *surface,
         struct wined3d_map_desc *map_desc, const RECT *rect, DWORD flags)
 {
     const struct wined3d_format *format = surface->resource.format;
+    const struct wined3d_device *device = surface->resource.device;
 
     TRACE("surface %p, map_desc %p, rect %s, flags %#x.\n",
             surface, map_desc, wine_dbgstr_rect(rect), flags);
 
-    if (wined3d_settings.cs_multithreaded)
-    {
-        FIXME("waiting for cs\n");
-        wined3d_cs_emit_glfinish(surface->resource.device->cs);
-        surface->resource.device->cs->ops->finish(surface->resource.device->cs);
-    }
-
-
     if (surface->resource.map_count)
     {
         WARN("Surface is already mapped.\n");
@@ -3928,7 +3915,7 @@ HRESULT CDECL wined3d_surface_map(struct wined3d_surface *surface,
         }
     }
 
-    surface->surface_ops->surface_map(surface, rect, flags);
+    wined3d_cs_emit_surface_map(device->cs, surface, rect, flags);
 
     if (format->flags & WINED3DFMT_FLAG_BROKEN_PITCH)
         map_desc->row_pitch = surface->resource.width * format->byte_count;
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 3d1d680..6b18a3b 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2583,6 +2583,9 @@ void wined3d_cs_emit_blt(struct wined3d_cs *cs, struct wined3d_surface *dst_surf
         enum wined3d_texture_filter_type filter) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_color_fill(struct wined3d_cs *cs, struct wined3d_surface *surface,
         const RECT *rect, const struct wined3d_color *color) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_surface_map(struct wined3d_cs *cs, struct wined3d_surface *surface,
+        const RECT *rect, DWORD flags) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_surface_unmap(struct wined3d_cs *cs, struct wined3d_surface *surface) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

