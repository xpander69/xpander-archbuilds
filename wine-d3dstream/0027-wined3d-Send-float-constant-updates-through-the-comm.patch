From 08ea16a7aff7ca4046214a58e827c6ba8c1b627a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Tue, 20 Aug 2013 15:12:26 +0200
Subject: [PATCH 027/127] wined3d: Send float constant updates through the
 command stream
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 87 ++++++++++++++++++++++++++++++++----------
 dlls/wined3d/device.c          | 22 +++++++++--
 dlls/wined3d/wined3d_private.h |  2 +
 3 files changed, 88 insertions(+), 23 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index e384254..a4e1062 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -29,6 +29,8 @@ enum wined3d_cs_op
     WINED3D_CS_OP_DRAW,
     WINED3D_CS_OP_STATEBLOCK,
     WINED3D_CS_OP_SET_RENDER_TARGET,
+    WINED3D_CS_OP_SET_VS_CONSTS_F,
+    WINED3D_CS_OP_SET_PS_CONSTS_F,
     WINED3D_CS_OP_STOP,
 };
 
@@ -83,7 +85,6 @@ struct wined3d_cs_stateblock
 {
     enum wined3d_cs_op opcode;
     struct wined3d_state state;
-    float vs_consts_f[256 * 4], ps_consts_f[256 * 4];
 };
 
 struct wined3d_cs_set_render_target
@@ -93,6 +94,13 @@ struct wined3d_cs_set_render_target
     struct wined3d_surface *render_target;
 };
 
+struct wined3d_cs_set_consts_f
+{
+    enum wined3d_cs_op opcode;
+    UINT start_register, vector4f_count;
+    float constants[4];
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -310,13 +318,7 @@ void wined3d_cs_emit_draw(struct wined3d_cs *cs, UINT start_idx, UINT index_coun
 
 static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const void *data)
 {
-    const struct wined3d_adapter *adapter = cs->device->adapter;
     const struct wined3d_cs_stateblock *op = data;
-    UINT num_vs_consts_f = sizeof(op->vs_consts_f) / sizeof(*op->vs_consts_f) / 4;
-    UINT num_ps_consts_f = sizeof(op->ps_consts_f) / sizeof(*op->ps_consts_f) / 4;
-
-    num_vs_consts_f = min(num_vs_consts_f, adapter->d3d_info.limits.vs_uniform_count);
-    num_ps_consts_f = min(num_ps_consts_f, adapter->d3d_info.limits.ps_uniform_count);
 
     /* Don't memcpy the entire struct, we'll remove single items as we add dedicated
      * ops for setting states */
@@ -336,7 +338,6 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
     memcpy(cs->state.vs_sampler, op->state.vs_sampler, sizeof(cs->state.vs_sampler));
     memcpy(cs->state.vs_consts_b, op->state.vs_consts_b, sizeof(cs->state.vs_consts_b));
     memcpy(cs->state.vs_consts_i, op->state.vs_consts_i, sizeof(cs->state.vs_consts_i));
-    memcpy(cs->state.vs_consts_f, op->state.vs_consts_f, sizeof(*cs->state.vs_consts_f) * num_vs_consts_f);
 
     cs->state.geometry_shader = op->state.geometry_shader;
     memcpy(cs->state.gs_cb, op->state.gs_cb, sizeof(cs->state.gs_cb));
@@ -347,7 +348,6 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
     memcpy(cs->state.ps_sampler, op->state.ps_sampler, sizeof(cs->state.ps_sampler));
     memcpy(cs->state.ps_consts_b, op->state.ps_consts_b, sizeof(cs->state.ps_consts_b));
     memcpy(cs->state.ps_consts_i, op->state.ps_consts_i, sizeof(cs->state.ps_consts_i));
-    memcpy(cs->state.ps_consts_f, op->state.ps_consts_f, sizeof(*cs->state.ps_consts_f) * num_ps_consts_f);
 
     memcpy(cs->state.textures, op->state.textures, sizeof(cs->state.textures));
     memcpy(cs->state.sampler_states, op->state.sampler_states, sizeof(cs->state.sampler_states));
@@ -369,14 +369,7 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
 
 void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct wined3d_state *state)
 {
-    const struct wined3d_device *device = cs->device;
-    const struct wined3d_adapter *adapter = device->adapter;
     struct wined3d_cs_stateblock *op;
-    UINT num_vs_consts_f = sizeof(op->vs_consts_f) / sizeof(*op->vs_consts_f) / 4;
-    UINT num_ps_consts_f = sizeof(op->ps_consts_f) / sizeof(*op->ps_consts_f) / 4;
-
-    num_vs_consts_f = min(num_vs_consts_f, adapter->d3d_info.limits.vs_uniform_count);
-    num_ps_consts_f = min(num_ps_consts_f, adapter->d3d_info.limits.ps_uniform_count);
 
     op = cs->ops->require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_STATEBLOCK;
@@ -399,8 +392,6 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
     memcpy(op->state.vs_sampler, state->vs_sampler, sizeof(op->state.vs_sampler));
     memcpy(op->state.vs_consts_b, state->vs_consts_b, sizeof(op->state.vs_consts_b));
     memcpy(op->state.vs_consts_i, state->vs_consts_i, sizeof(op->state.vs_consts_i));
-    op->state.vs_consts_f = op->vs_consts_f;
-    memcpy(op->state.vs_consts_f, state->vs_consts_f, sizeof(*op->state.vs_consts_f) * num_vs_consts_f);
 
     op->state.geometry_shader = state->geometry_shader;
     memcpy(op->state.gs_cb, state->gs_cb, sizeof(op->state.gs_cb));
@@ -411,8 +402,6 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
     memcpy(op->state.ps_sampler, state->ps_sampler, sizeof(op->state.ps_sampler));
     memcpy(op->state.ps_consts_b, state->ps_consts_b, sizeof(op->state.ps_consts_b));
     memcpy(op->state.ps_consts_i, state->ps_consts_i, sizeof(op->state.ps_consts_i));
-    op->state.ps_consts_f = op->ps_consts_f;
-    memcpy(op->state.ps_consts_f, state->ps_consts_f, sizeof(*op->state.ps_consts_f) * num_ps_consts_f);
 
     memcpy(op->state.textures, state->textures, sizeof(op->state.textures));
     memcpy(op->state.sampler_states, state->sampler_states, sizeof(op->state.sampler_states));
@@ -458,6 +447,62 @@ void wined3d_cs_emit_set_render_target(struct wined3d_cs *cs, UINT render_target
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_set_vs_consts_f(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_consts_f *op = data;
+    struct wined3d_device *device = cs->device;
+
+    memcpy(cs->state.vs_consts_f + op->start_register * 4, op->constants,
+            sizeof(*cs->state.vs_consts_f) * 4 * op->vector4f_count);
+
+    device->shader_backend->shader_update_float_vertex_constants(device,
+            op->start_register, op->vector4f_count);
+
+    return sizeof(*op) + sizeof(op->constants) * (op->vector4f_count - 1);
+}
+
+static UINT wined3d_cs_exec_set_ps_consts_f(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_consts_f *op = data;
+    struct wined3d_device *device = cs->device;
+
+    memcpy(cs->state.ps_consts_f + op->start_register * 4, op->constants,
+            sizeof(*cs->state.ps_consts_f) * 4 * op->vector4f_count);
+
+    device->shader_backend->shader_update_float_pixel_constants(device,
+            op->start_register, op->vector4f_count);
+
+    return sizeof(*op) + sizeof(op->constants) * (op->vector4f_count - 1);
+}
+
+void wined3d_cs_emit_set_consts_f(struct wined3d_cs *cs, UINT start_register,
+        const float *constants, UINT vector4f_count, enum wined3d_shader_type type)
+{
+    struct wined3d_cs_set_consts_f *op;
+    UINT extra_space = vector4f_count - 1;
+
+    op = cs->ops->require_space(cs, sizeof(*op) + sizeof(op->constants) * extra_space);
+    switch (type)
+    {
+        case WINED3D_SHADER_TYPE_PIXEL:
+            op->opcode = WINED3D_CS_OP_SET_PS_CONSTS_F;
+            break;
+
+        case WINED3D_SHADER_TYPE_VERTEX:
+            op->opcode = WINED3D_CS_OP_SET_VS_CONSTS_F;
+            break;
+
+        case WINED3D_SHADER_TYPE_GEOMETRY:
+            FIXME("Invalid for geometry shaders\n");
+            return;
+    }
+    op->start_register = start_register;
+    op->vector4f_count = vector4f_count;
+    memcpy(op->constants, constants, sizeof(*constants) * 4 * vector4f_count);
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -466,6 +511,8 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_DRAW                   */ wined3d_cs_exec_draw,
     /* WINED3D_CS_OP_STATEBLOCK             */ wined3d_cs_exec_transfer_stateblock,
     /* WINED3D_CS_OP_SET_RENDER_TARGET      */ wined3d_cs_exec_set_render_target,
+    /* WINED3D_CS_OP_SET_VS_CONSTS_F        */ wined3d_cs_exec_set_vs_consts_f,
+    /* WINED3D_CS_OP_SET_PS_CONSTS_F        */ wined3d_cs_exec_set_ps_consts_f,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index a9783bd..c259bd8 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -837,6 +837,7 @@ HRESULT CDECL wined3d_device_init_3d(struct wined3d_device *device,
     struct wined3d_swapchain *swapchain = NULL;
     struct wined3d_context *context;
     HRESULT hr;
+    const struct wined3d_d3d_info *d3d_info = &device->adapter->d3d_info;
 
     TRACE("device %p, swapchain_desc %p.\n", device, swapchain_desc);
 
@@ -878,6 +879,10 @@ HRESULT CDECL wined3d_device_init_3d(struct wined3d_device *device,
 
     /* Setup all the devices defaults */
     state_init_default(&device->state, device);
+    wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.vs_consts_f,
+            d3d_info->limits.vs_uniform_count, WINED3D_SHADER_TYPE_VERTEX);
+    wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.ps_consts_f,
+            d3d_info->limits.ps_uniform_count, WINED3D_SHADER_TYPE_PIXEL);
 
     if (swapchain->back_buffers && swapchain->back_buffers[0])
     {
@@ -2340,8 +2345,8 @@ HRESULT CDECL wined3d_device_set_vs_consts_f(struct wined3d_device *device,
         memset(device->recording->changed.vertexShaderConstantsF + start_register, 1,
                 sizeof(*device->recording->changed.vertexShaderConstantsF) * vector4f_count);
     else
-        device->shader_backend->shader_update_float_vertex_constants(device, start_register, vector4f_count);
-
+        wined3d_cs_emit_set_consts_f(device->cs, start_register, constants, vector4f_count,
+                WINED3D_SHADER_TYPE_VERTEX);
 
     return WINED3D_OK;
 }
@@ -2607,7 +2612,8 @@ HRESULT CDECL wined3d_device_set_ps_consts_f(struct wined3d_device *device,
         memset(device->recording->changed.pixelShaderConstantsF + start_register, 1,
                 sizeof(*device->recording->changed.pixelShaderConstantsF) * vector4f_count);
     else
-        device->shader_backend->shader_update_float_pixel_constants(device, start_register, vector4f_count);
+        wined3d_cs_emit_set_consts_f(device->cs, start_register, constants, vector4f_count,
+                WINED3D_SHADER_TYPE_PIXEL);
 
     return WINED3D_OK;
 }
@@ -4428,6 +4434,7 @@ HRESULT CDECL wined3d_device_reset(struct wined3d_device *device,
     HRESULT hr = WINED3D_OK;
     unsigned int i;
     struct wined3d_surface *new_rt = NULL;
+    const struct wined3d_d3d_info *d3d_info = &device->adapter->d3d_info;
 
     TRACE("device %p, swapchain_desc %p, mode %p, callback %p.\n", device, swapchain_desc, mode, callback);
 
@@ -4754,7 +4761,16 @@ HRESULT CDECL wined3d_device_reset(struct wined3d_device *device,
     swapchain_update_draw_bindings(swapchain);
 
     if (reset_state && device->d3d_initialized)
+    {
         hr = create_primary_opengl_context(device, swapchain);
+        if (FAILED(hr))
+            return hr;
+
+        wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.vs_consts_f,
+                d3d_info->limits.vs_uniform_count, WINED3D_SHADER_TYPE_VERTEX);
+        wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.ps_consts_f,
+                d3d_info->limits.ps_uniform_count, WINED3D_SHADER_TYPE_PIXEL);
+    }
 
     /* All done. There is no need to reload resources or shaders, this will happen automatically on the
      * first use
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 3ebae6d..6ec95ee 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2528,6 +2528,8 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs,
         const struct wined3d_state *state) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_render_target(struct wined3d_cs *cs, UINT render_target_idx,
         struct wined3d_surface *render_target) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_set_consts_f(struct wined3d_cs *cs, UINT start_register, const float *constants,
+        UINT vector4f_count, enum wined3d_shader_type type) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

