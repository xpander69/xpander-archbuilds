From 01100bba1ea06b0093bfec347bff8e966f9869a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 28 Aug 2013 14:15:41 +0200
Subject: [PATCH 046/127] wined3d: Send vertex shader binding updates through
 the command stream.
Reply-To: wine-devel <wine-devel@winehq.org>

Based on a patch by Henri Verbeet.
---
 dlls/wined3d/cs.c              | 31 +++++++++++++++++++++++++++++--
 dlls/wined3d/device.c          | 24 ++++++++++++------------
 dlls/wined3d/wined3d_private.h |  1 +
 3 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 9a0a315..46288a8 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -41,6 +41,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_STREAM_SOURCE_FREQ,
     WINED3D_CS_OP_SET_INDEX_BUFFER,
     WINED3D_CS_OP_SET_TEXTURE,
+    WINED3D_CS_OP_SET_VERTEX_SHADER,
     WINED3D_CS_OP_STOP,
 };
 
@@ -176,6 +177,12 @@ struct wined3d_cs_set_texture
     struct wined3d_texture *texture;
 };
 
+struct wined3d_cs_set_shader
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_shader *shader;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -403,7 +410,6 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
     cs->state.load_base_vertex_index = op->state.load_base_vertex_index;
     cs->state.gl_primitive_type = op->state.gl_primitive_type;
 
-    cs->state.vertex_shader = op->state.vertex_shader;
     memcpy(cs->state.vs_cb, op->state.vs_cb, sizeof(cs->state.vs_cb));
     memcpy(cs->state.vs_sampler, op->state.vs_sampler, sizeof(cs->state.vs_sampler));
     memcpy(cs->state.vs_consts_b, op->state.vs_consts_b, sizeof(cs->state.vs_consts_b));
@@ -448,7 +454,6 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
     op->state.load_base_vertex_index = state->load_base_vertex_index;
     op->state.gl_primitive_type = state->gl_primitive_type;
 
-    op->state.vertex_shader = state->vertex_shader;
     memcpy(op->state.vs_cb, state->vs_cb, sizeof(op->state.vs_cb));
     memcpy(op->state.vs_sampler, state->vs_sampler, sizeof(op->state.vs_sampler));
     memcpy(op->state.vs_consts_b, state->vs_consts_b, sizeof(op->state.vs_consts_b));
@@ -890,6 +895,27 @@ void wined3d_cs_emit_set_texture(struct wined3d_cs *cs, UINT stage, struct wined
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_set_vertex_shader(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_shader *op = data;
+
+    cs->state.vertex_shader = op->shader;
+    device_invalidate_state(cs->device, STATE_VSHADER);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_set_vertex_shader(struct wined3d_cs *cs, struct wined3d_shader *shader)
+{
+    struct wined3d_cs_set_shader *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SET_VERTEX_SHADER;
+    op->shader = shader;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -910,6 +936,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_STREAM_SOURCE_FREQ */ wined3d_cs_exec_set_stream_source_freq,
     /* WINED3D_CS_OP_SET_INDEX_BUFFER       */ wined3d_cs_exec_set_index_buffer,
     /* WINED3D_CS_OP_SET_TEXTURE            */ wined3d_cs_exec_set_texture,
+    /* WINED3D_CS_OP_SET_VERTEX_SHADER      */ wined3d_cs_exec_set_vertex_shader,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index e61a605..ddb24bf 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -2057,19 +2057,8 @@ void CDECL wined3d_device_set_vertex_shader(struct wined3d_device *device, struc
 
     TRACE("device %p, shader %p.\n", device, shader);
 
-    if (shader)
-        wined3d_shader_incref(shader);
-    if (prev)
-        wined3d_shader_decref(prev);
-
-    device->update_state->vertex_shader = shader;
-
     if (device->recording)
-    {
-        TRACE("Recording... not performing anything.\n");
         device->recording->changed.vertexShader = TRUE;
-        return;
-    }
 
     if (shader == prev)
     {
@@ -2077,7 +2066,18 @@ void CDECL wined3d_device_set_vertex_shader(struct wined3d_device *device, struc
         return;
     }
 
-    device_invalidate_state(device, STATE_VSHADER);
+    device->update_state->vertex_shader = shader;
+
+    if (shader)
+        wined3d_shader_incref(shader);
+
+    if (device->recording)
+        TRACE("Recording... not performing anything.\n");
+    else
+        wined3d_cs_emit_set_vertex_shader(device->cs, shader);
+
+    if (prev)
+        wined3d_shader_decref(prev);
 }
 
 struct wined3d_shader * CDECL wined3d_device_get_vertex_shader(const struct wined3d_device *device)
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 92788e3..81ee31d 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2545,6 +2545,7 @@ void wined3d_cs_emit_set_stream_source_freq(struct wined3d_cs *cs, UINT stream_i
 void wined3d_cs_emit_set_index_buffer(struct wined3d_cs *cs, struct wined3d_buffer *buffer,
         enum wined3d_format_id format_id) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_texture(struct wined3d_cs *cs, UINT stage, struct wined3d_texture *texture) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_set_vertex_shader(struct wined3d_cs *cs, struct wined3d_shader *shader) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

