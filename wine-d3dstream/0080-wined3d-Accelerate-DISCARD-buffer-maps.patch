From fd4ce66f483600bbfd691378c2b92f906ceee2f6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Sat, 6 Jul 2013 16:14:16 +0200
Subject: [PATCH 080/127] wined3d: Accelerate DISCARD buffer maps
Reply-To: wine-devel <wine-devel@winehq.org>

TODO: Make this generic for all resources.
TODO2: Merge this with the patch that controlls BUFFER_DISCARD in the CS thread
---
 dlls/wined3d/buffer.c          | 15 ++++++++++++---
 dlls/wined3d/cs.c              | 38 ++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/wined3d_private.h |  2 ++
 3 files changed, 52 insertions(+), 3 deletions(-)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 3da92b0..4447908 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -1067,10 +1067,19 @@ HRESULT CDECL wined3d_buffer_map(struct wined3d_buffer *buffer, UINT offset, UIN
         }
     }
 
-    if (!(flags & WINED3D_MAP_NOOVERWRITE) && wined3d_settings.cs_multithreaded)
+    if (wined3d_settings.cs_multithreaded && count == 1)
     {
-        FIXME("waiting for cs.\n");
-        device->cs->ops->finish(device->cs);
+        BOOL swvp = device->create_parms.flags & WINED3DCREATE_SOFTWARE_VERTEXPROCESSING;
+        if (flags & WINED3D_MAP_DISCARD && !swvp)
+        {
+            buffer->map_mem = wined3d_resource_allocate_sysmem(buffer->resource.size);
+            wined3d_cs_emit_swap_mem(device->cs, buffer, buffer->map_mem);
+        }
+        else if(!(flags & WINED3D_MAP_NOOVERWRITE))
+        {
+            FIXME("waiting for cs.\n");
+            device->cs->ops->finish(device->cs);
+        }
     }
 
     *data = buffer->map_mem + offset;
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 0074a6e..f44cbfb 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -70,6 +70,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_COLOR_FILL,
     WINED3D_CS_OP_SURFACE_MAP,
     WINED3D_CS_OP_SURFACE_UNMAP,
+    WINED3D_CS_OP_SWAP_MEM,
     WINED3D_CS_OP_STOP,
 };
 
@@ -349,6 +350,13 @@ struct wined3d_cs_skip
     DWORD size;
 };
 
+struct wined3d_cs_swap_mem
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_buffer *buffer;
+    BYTE *mem;
+};
+
 static void wined3d_cs_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
@@ -1765,6 +1773,35 @@ void wined3d_cs_emit_surface_unmap(struct wined3d_cs *cs, struct wined3d_surface
     cs->ops->submit(cs, sizeof(*op));
 }
 
+static UINT wined3d_cs_exec_swap_mem(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_swap_mem *op = data;
+    struct wined3d_buffer *buffer = op->buffer;
+
+    wined3d_resource_free_sysmem(buffer->resource.heap_memory);
+    buffer->resource.allocatedMemory = op->mem;
+    buffer->resource.heap_memory = op->mem;
+
+    if (!buffer->buffer_object && buffer->resource.bind_count)
+    {
+        device_invalidate_state(cs->device, STATE_STREAMSRC);
+        device_invalidate_state(cs->device, STATE_INDEXBUFFER);
+    }
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_swap_mem(struct wined3d_cs *cs, struct wined3d_buffer *buffer, BYTE *mem)
+{
+    struct wined3d_cs_swap_mem *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SWAP_MEM;
+    op->buffer = buffer;
+    op->mem = mem;
+
+    cs->ops->submit(cs, sizeof(*op));
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                    */ wined3d_cs_exec_nop,
@@ -1814,6 +1851,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_COLOR_FILL             */ wined3d_cs_exec_color_fill,
     /* WINED3D_CS_OP_SURFACE_MAP            */ wined3d_cs_exec_surface_map,
     /* WINED3D_CS_OP_SURFACE_UNMAP          */ wined3d_cs_exec_surface_unmap,
+    /* WINED3D_CS_OP_SWAP_MEM               */ wined3d_cs_exec_swap_mem,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index e609b5a..e8d47f8 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2583,6 +2583,8 @@ void wined3d_cs_emit_color_fill(struct wined3d_cs *cs, struct wined3d_surface *s
 void wined3d_cs_emit_surface_map(struct wined3d_cs *cs, struct wined3d_surface *surface,
         const RECT *rect, DWORD flags) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_surface_unmap(struct wined3d_cs *cs, struct wined3d_surface *surface) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_swap_mem(struct wined3d_cs *cs, struct wined3d_buffer *buffer,
+        BYTE *mem) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

