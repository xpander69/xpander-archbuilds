From 1c7892d237cadd8eabe53532edf775107ba75994 Mon Sep 17 00:00:00 2001
From: Henri Verbeet <hverbeet@codeweavers.com>
Date: Sat, 8 Dec 2012 19:28:54 +0100
Subject: [PATCH 016/127] Implement cs_ops. This doesn't do anything on its
 own, but should be merged with the first patch that actually submits
 something to the command stream.
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 128 +++++++++++++++++++++++++++++++++++++++--
 dlls/wined3d/wined3d_private.h |   7 +++
 2 files changed, 129 insertions(+), 6 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index b5d0bc2..86ffa9b 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -23,6 +23,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(d3d);
 
 enum wined3d_cs_op
 {
+    WINED3D_CS_OP_FENCE,
     WINED3D_CS_OP_STOP,
 };
 
@@ -31,6 +32,12 @@ struct wined3d_cs_stop
     enum wined3d_cs_op opcode;
 };
 
+struct wined3d_cs_fence
+{
+    enum wined3d_cs_op opcode;
+    BOOL *signalled;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -117,6 +124,31 @@ static struct wined3d_cs_block *wined3d_cs_get_block(struct wined3d_cs *cs)
     return block;
 }
 
+static UINT wined3d_cs_exec_fence(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_fence *op = data;
+
+    InterlockedExchange(op->signalled, TRUE);
+
+    return sizeof(*op);
+}
+
+static void wined3d_cs_emit_fence(struct wined3d_cs *cs, BOOL *signalled)
+{
+    struct wined3d_cs_fence *op;
+
+    *signalled = FALSE;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_FENCE;
+    op->signalled = signalled;
+}
+
+static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
+{
+    /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
+};
+
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
 {
     struct wined3d_cs_block *block = wined3d_cs_get_thread_block(cs);
@@ -148,6 +180,78 @@ static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
     wined3d_cs_flush(cs);
 }
 
+static void wined3d_cs_flush_and_wait(struct wined3d_cs *cs)
+{
+    BOOL fence;
+
+    wined3d_cs_emit_fence(cs, &fence);
+    wined3d_cs_flush(cs);
+
+    /* A busy wait should be fine, we're not supposed to have to wait very
+     * long. */
+    while (!InterlockedCompareExchange(&fence, TRUE, TRUE));
+}
+
+static const struct wined3d_cs_ops wined3d_cs_mt_ops =
+{
+    wined3d_cs_mt_require_space,
+    wined3d_cs_flush_and_wait,
+};
+
+static void wined3d_cs_st_submit(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_block *block = wined3d_cs_get_thread_block(cs);
+    UINT pos = 0;
+
+    while (pos < block->pos)
+    {
+        enum wined3d_cs_op opcode = *(const enum wined3d_cs_op *)&block->data[pos];
+
+        if (opcode >= WINED3D_CS_OP_STOP)
+        {
+            ERR("Invalid opcode %#x.\n", opcode);
+            goto done;
+        }
+
+        pos += wined3d_cs_op_handlers[opcode](cs, &block->data[pos]);
+    }
+
+done:
+    block->pos = 0;
+}
+
+static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size)
+{
+    struct wined3d_cs_block *block = wined3d_cs_get_thread_block(cs);
+    void *data;
+
+    if (!block)
+    {
+        if (!(block = HeapAlloc(GetProcessHeap(), 0, sizeof(*block))))
+        {
+            ERR("Failed to get new block.\n");
+            return NULL;
+        }
+        block->pos = 0;
+        wined3d_cs_set_thread_block(cs, block);
+    }
+    else if (block->pos + size > sizeof(block->data))
+    {
+        wined3d_cs_st_submit(cs);
+    }
+
+    data = &block->data[block->pos];
+    block->pos += size;
+
+    return data;
+}
+
+static const struct wined3d_cs_ops wined3d_cs_st_ops =
+{
+    wined3d_cs_st_require_space,
+    wined3d_cs_st_submit,
+};
+
 static DWORD WINAPI wined3d_cs_run(void *thread_param)
 {
     struct wined3d_cs *cs = thread_param;
@@ -157,17 +261,23 @@ static DWORD WINAPI wined3d_cs_run(void *thread_param)
     for (;;)
     {
         struct wined3d_cs_block *block;
-        enum wined3d_cs_op opcode;
+        UINT pos = 0;
 
         block = wined3d_cs_list_dequeue_blocking(&cs->exec_list);
-        opcode = *(const enum wined3d_cs_op *)block->data;
+        while (pos < block->pos)
+        {
+            enum wined3d_cs_op opcode = *(const enum wined3d_cs_op *)&block->data[pos];
 
-        if (opcode > WINED3D_CS_OP_STOP)
-            ERR("Invalid opcode %#x.\n", opcode);
+            if (opcode >= WINED3D_CS_OP_STOP)
+            {
+                if (opcode > WINED3D_CS_OP_STOP)
+                    ERR("Invalid opcode %#x.\n", opcode);
+                goto done;
+            }
 
+            pos += wined3d_cs_op_handlers[opcode](cs, &block->data[pos]);
+        }
         wined3d_cs_list_enqueue(&cs->free_list, block);
-
-        goto done;
     }
 
 done:
@@ -209,6 +319,12 @@ struct wined3d_cs *wined3d_cs_create(void)
             HeapFree(GetProcessHeap(), 0, cs);
             return NULL;
         }
+
+        cs->ops = &wined3d_cs_mt_ops;
+    }
+    else
+    {
+        cs->ops = &wined3d_cs_st_ops;
     }
 
     return cs;
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 70ebfe5..0be6b8c 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2487,8 +2487,15 @@ struct wined3d_cs_block
     BYTE data[4000]; /* FIXME? The size is somewhat arbitrary. */
 };
 
+struct wined3d_cs_ops
+{
+    void *(*require_space)(struct wined3d_cs *cs, size_t size);
+    void (*submit)(struct wined3d_cs *cs);
+};
+
 struct wined3d_cs
 {
+    const struct wined3d_cs_ops *ops;
     HANDLE thread;
     DWORD tls_idx;
     struct wined3d_cs_list free_list;
-- 
1.8.1.5

