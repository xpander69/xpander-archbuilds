From ceb1c0ef51d1c9125f027471c0f975bc0fa2f88c Mon Sep 17 00:00:00 2001
From: Henri Verbeet <hverbeet@codeweavers.com>
Date: Sat, 8 Dec 2012 19:28:55 +0100
Subject: [PATCH 017/127] wined3d: Send present calls through the command
 stream.
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 48 ++++++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/swapchain.c       |  5 ++---
 dlls/wined3d/wined3d_private.h | 10 +++++++++
 3 files changed, 60 insertions(+), 3 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 86ffa9b..59fe268 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -24,6 +24,7 @@ WINE_DEFAULT_DEBUG_CHANNEL(d3d);
 enum wined3d_cs_op
 {
     WINED3D_CS_OP_FENCE,
+    WINED3D_CS_OP_PRESENT,
     WINED3D_CS_OP_STOP,
 };
 
@@ -38,6 +39,20 @@ struct wined3d_cs_fence
     BOOL *signalled;
 };
 
+/* FIXME: Once the command stream runs asynchronously, we can't have pointer
+ * to stack data (for e.g. rects) here, since they'll go away while the cs is
+ * running. */
+struct wined3d_cs_present
+{
+    enum wined3d_cs_op opcode;
+    HWND dst_window_override;
+    struct wined3d_swapchain *swapchain;
+    const RECT *src_rect;
+    const RECT *dst_rect;
+    const RGNDATA *dirty_region;
+    DWORD flags;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -144,9 +159,42 @@ static void wined3d_cs_emit_fence(struct wined3d_cs *cs, BOOL *signalled)
     op->signalled = signalled;
 }
 
+static UINT wined3d_cs_exec_present(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_present *op = data;
+    struct wined3d_swapchain *swapchain;
+
+    swapchain = op->swapchain;
+    wined3d_swapchain_set_window(swapchain, op->dst_window_override);
+
+    swapchain->swapchain_ops->swapchain_present(swapchain,
+            op->src_rect, op->dst_rect, op->dirty_region, op->flags);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_present(struct wined3d_cs *cs, struct wined3d_swapchain *swapchain,
+        const RECT *src_rect, const RECT *dst_rect, HWND dst_window_override,
+        const RGNDATA *dirty_region, DWORD flags)
+{
+    struct wined3d_cs_present *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_PRESENT;
+    op->dst_window_override = dst_window_override;
+    op->swapchain = swapchain;
+    op->src_rect = src_rect;
+    op->dst_rect = dst_rect;
+    op->dirty_region = dirty_region;
+    op->flags = flags;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
+    /* WINED3D_CS_OP_PRESENT                */ wined3d_cs_exec_present,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/swapchain.c b/dlls/wined3d/swapchain.c
index 550a265..f5c2db3 100644
--- a/dlls/wined3d/swapchain.c
+++ b/dlls/wined3d/swapchain.c
@@ -151,9 +151,8 @@ HRESULT CDECL wined3d_swapchain_present(struct wined3d_swapchain *swapchain,
         return WINED3DERR_INVALIDCALL;
     }
 
-    wined3d_swapchain_set_window(swapchain, dst_window_override);
-
-    swapchain->swapchain_ops->swapchain_present(swapchain, src_rect, dst_rect, dirty_region, flags);
+    wined3d_cs_emit_present(swapchain->device->cs, swapchain, src_rect,
+            dst_rect, dst_window_override, dirty_region, flags);
 
     return WINED3D_OK;
 }
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 0be6b8c..a7ea5a7 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2500,11 +2500,21 @@ struct wined3d_cs
     DWORD tls_idx;
     struct wined3d_cs_list free_list;
     struct wined3d_cs_list exec_list;
+    /* FIXME: We should throttle presents, to prevent the application from
+     * getting too far ahead of the GPU. 2 or 3 frames is probably still
+     * acceptable. */
+#if 0
+    UINT present_idx;
+#endif
 };
 
 struct wined3d_cs *wined3d_cs_create(void) DECLSPEC_HIDDEN;
 void wined3d_cs_destroy(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 
+void wined3d_cs_emit_present(struct wined3d_cs *cs, struct wined3d_swapchain *swapchain,
+        const RECT *src_rect, const RECT *dst_rect, HWND dst_window_override,
+        const RGNDATA *dirty_region, DWORD flags) DECLSPEC_HIDDEN;
+
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
  * allows GetData on a created issue, but opengl doesn't
-- 
1.8.1.5

