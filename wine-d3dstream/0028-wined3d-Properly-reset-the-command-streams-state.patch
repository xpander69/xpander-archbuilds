From 5d59d5d38f6a16069c155442e1a7c662760d7e8e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Thu, 4 Apr 2013 11:11:00 +0200
Subject: [PATCH 028/127] wined3d: Properly reset the command streams state
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 26 ++++++++++++++++++++++++++
 dlls/wined3d/device.c          | 17 ++---------------
 dlls/wined3d/wined3d_private.h |  1 +
 3 files changed, 29 insertions(+), 15 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index a4e1062..36fc736 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -31,6 +31,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_RENDER_TARGET,
     WINED3D_CS_OP_SET_VS_CONSTS_F,
     WINED3D_CS_OP_SET_PS_CONSTS_F,
+    WINED3D_CS_OP_RESET_STATE,
     WINED3D_CS_OP_STOP,
 };
 
@@ -101,6 +102,11 @@ struct wined3d_cs_set_consts_f
     float constants[4];
 };
 
+struct wined3d_cs_reset_state
+{
+    enum wined3d_cs_op opcode;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -503,6 +509,25 @@ void wined3d_cs_emit_set_consts_f(struct wined3d_cs *cs, UINT start_register,
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_reset_state(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_reset_state *op = data;
+
+    state_init_default(&cs->state, cs->device);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_reset_state(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_reset_state *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_RESET_STATE;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -513,6 +538,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_RENDER_TARGET      */ wined3d_cs_exec_set_render_target,
     /* WINED3D_CS_OP_SET_VS_CONSTS_F        */ wined3d_cs_exec_set_vs_consts_f,
     /* WINED3D_CS_OP_SET_PS_CONSTS_F        */ wined3d_cs_exec_set_ps_consts_f,
+    /* WINED3D_CS_OP_RESET_STATE            */ wined3d_cs_exec_reset_state,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index c259bd8..173a60a 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -837,7 +837,6 @@ HRESULT CDECL wined3d_device_init_3d(struct wined3d_device *device,
     struct wined3d_swapchain *swapchain = NULL;
     struct wined3d_context *context;
     HRESULT hr;
-    const struct wined3d_d3d_info *d3d_info = &device->adapter->d3d_info;
 
     TRACE("device %p, swapchain_desc %p.\n", device, swapchain_desc);
 
@@ -879,10 +878,7 @@ HRESULT CDECL wined3d_device_init_3d(struct wined3d_device *device,
 
     /* Setup all the devices defaults */
     state_init_default(&device->state, device);
-    wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.vs_consts_f,
-            d3d_info->limits.vs_uniform_count, WINED3D_SHADER_TYPE_VERTEX);
-    wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.ps_consts_f,
-            d3d_info->limits.ps_uniform_count, WINED3D_SHADER_TYPE_PIXEL);
+    wined3d_cs_emit_reset_state(device->cs);
 
     if (swapchain->back_buffers && swapchain->back_buffers[0])
     {
@@ -4434,7 +4430,6 @@ HRESULT CDECL wined3d_device_reset(struct wined3d_device *device,
     HRESULT hr = WINED3D_OK;
     unsigned int i;
     struct wined3d_surface *new_rt = NULL;
-    const struct wined3d_d3d_info *d3d_info = &device->adapter->d3d_info;
 
     TRACE("device %p, swapchain_desc %p, mode %p, callback %p.\n", device, swapchain_desc, mode, callback);
 
@@ -4730,6 +4725,7 @@ HRESULT CDECL wined3d_device_reset(struct wined3d_device *device,
         if (FAILED(hr))
             ERR("Failed to initialize device state, hr %#x.\n", hr);
         state_init_default(&device->state, device);
+        wined3d_cs_emit_reset_state(device->cs);
         device->update_state = &device->state;
     }
     else
@@ -4761,16 +4757,7 @@ HRESULT CDECL wined3d_device_reset(struct wined3d_device *device,
     swapchain_update_draw_bindings(swapchain);
 
     if (reset_state && device->d3d_initialized)
-    {
         hr = create_primary_opengl_context(device, swapchain);
-        if (FAILED(hr))
-            return hr;
-
-        wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.vs_consts_f,
-                d3d_info->limits.vs_uniform_count, WINED3D_SHADER_TYPE_VERTEX);
-        wined3d_cs_emit_set_consts_f(device->cs, 0, device->state.ps_consts_f,
-                d3d_info->limits.ps_uniform_count, WINED3D_SHADER_TYPE_PIXEL);
-    }
 
     /* All done. There is no need to reload resources or shaders, this will happen automatically on the
      * first use
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 6ec95ee..b5b7958 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2530,6 +2530,7 @@ void wined3d_cs_emit_set_render_target(struct wined3d_cs *cs, UINT render_target
         struct wined3d_surface *render_target) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_consts_f(struct wined3d_cs *cs, UINT start_register, const float *constants,
         UINT vector4f_count, enum wined3d_shader_type type) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_reset_state(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

