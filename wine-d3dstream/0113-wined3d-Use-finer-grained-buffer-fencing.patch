From 4b90a070cdc6fea1d35028c5b1f30d9f46618e9d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Fri, 30 Aug 2013 10:03:26 +0200
Subject: [PATCH 113/127] wined3d: Use finer-grained buffer fencing
Reply-To: wine-devel <wine-devel@winehq.org>

TODO: This could be more efficient. Find out which streams are
referenced in a vertex declaration at decl creation time and fence the
buffers in those streams only once.
---
 dlls/wined3d/buffer.c          |  3 +--
 dlls/wined3d/cs.c              | 15 +++++++++++++++
 dlls/wined3d/wined3d_private.h | 16 ++++++++++++++++
 3 files changed, 32 insertions(+), 2 deletions(-)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 83dceb1..fcd45c4 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -1054,8 +1054,7 @@ HRESULT CDECL wined3d_buffer_map(struct wined3d_buffer *buffer, UINT offset, UIN
         }
         else if(!(flags & (WINED3D_MAP_NOOVERWRITE | WINED3D_MAP_READONLY)))
         {
-            FIXME("waiting for cs, flags 0x%04x.\n", flags);
-            device->cs->ops->finish(device->cs);
+            wined3d_resource_wait_fence((struct wined3d_resource *)buffer);
         }
     }
 
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 659e7d1..d921cc9 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -604,6 +604,7 @@ static UINT wined3d_cs_exec_draw(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_draw *op = data;
     const struct wined3d_gl_info *gl_info = &cs->device->adapter->gl_info;
+    unsigned int i;
 
     if (op->indexed && !gl_info->supported[ARB_DRAW_ELEMENTS_BASE_VERTEX])
     {
@@ -622,6 +623,12 @@ static UINT wined3d_cs_exec_draw(struct wined3d_cs *cs, const void *data)
     draw_primitive(cs->device, &cs->state, op->start_idx, op->index_count,
             op->start_instance, op->instance_count, op->indexed);
 
+    for (i = 0; i < sizeof(cs->state.streams) / sizeof(*cs->state.streams); i++)
+    {
+        if (cs->state.streams[i].buffer)
+            wined3d_resource_dec_fence(&cs->state.streams[i].buffer->resource);
+    }
+
     return sizeof(*op);
 }
 
@@ -629,6 +636,8 @@ void wined3d_cs_emit_draw(struct wined3d_cs *cs, UINT start_idx, UINT index_coun
         UINT start_instance, UINT instance_count, BOOL indexed)
 {
     struct wined3d_cs_draw *op;
+    unsigned int i;
+    const struct wined3d_state *state = &cs->device->state;
 
     op = cs->ops->require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_DRAW;
@@ -638,6 +647,12 @@ void wined3d_cs_emit_draw(struct wined3d_cs *cs, UINT start_idx, UINT index_coun
     op->instance_count = instance_count;
     op->indexed = indexed;
 
+    for (i = 0; i < sizeof(state->streams) / sizeof(*state->streams); i++)
+    {
+        if (state->streams[i].buffer)
+            wined3d_resource_inc_fence(&state->streams[i].buffer->resource);
+    }
+
     cs->ops->submit(cs, sizeof(*op));
 }
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index f9c3594..d31b4da 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2036,6 +2036,7 @@ struct wined3d_resource
     void *heap_memory;
     struct list privateData;
     struct list resource_list_entry;
+    LONG access_fence;
 
     void *parent;
     const struct wined3d_parent_ops *parent_ops;
@@ -2056,6 +2057,21 @@ DWORD wined3d_resource_sanitize_map_flags(const struct wined3d_resource *resourc
         DWORD flags) DECLSPEC_HIDDEN;
 GLbitfield wined3d_resource_gl_map_flags(DWORD d3d_flags) DECLSPEC_HIDDEN;
 
+static inline void wined3d_resource_inc_fence(struct wined3d_resource *resource)
+{
+    InterlockedIncrement(&resource->access_fence);
+}
+
+static inline void wined3d_resource_dec_fence(struct wined3d_resource *resource)
+{
+    InterlockedDecrement(&resource->access_fence);
+}
+
+static inline void wined3d_resource_wait_fence(struct wined3d_resource *resource)
+{
+    while(InterlockedCompareExchange(&resource->access_fence, 0, 0));
+}
+
 /* Tests show that the start address of resources is 32 byte aligned */
 #define RESOURCE_ALIGNMENT 16
 
-- 
1.8.1.5

