From 46ec50c68ed430a75bfa2e97552e51bbf6124d24 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Fri, 30 Aug 2013 18:17:55 +0200
Subject: [PATCH 119/127] wined3d: Move buffer creation and destruction into
 the CS
Reply-To: wine-devel <wine-devel@winehq.org>

Well, kina, only for volumes so far.

Creation could be handled in the main thread, like we're doing it for
d3d buffers right now, but that would require a GL context and a
GL flush.
---
 dlls/wined3d/cs.c              | 70 ++++++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/device.c          | 33 +++-----------------
 dlls/wined3d/volume.c          | 13 +++-----
 dlls/wined3d/wined3d_private.h |  7 +++--
 4 files changed, 83 insertions(+), 40 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index ca4abc5..341a944 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -83,6 +83,8 @@ enum wined3d_cs_op
     WINED3D_CS_OP_UPDATE_TEXTURE,
     WINED3D_CS_OP_EVICT_RESOURCE,
     WINED3D_CS_OP_SURFACE_FLIP,
+    WINED3D_CS_OP_BO_INIT,
+    WINED3D_CS_OP_BO_DESTROY,
     WINED3D_CS_OP_STOP,
 };
 
@@ -446,6 +448,12 @@ struct wined3d_cs_surface_flip
     struct wined3d_surface *surface, *override;
 };
 
+struct wined3d_cs_bo_init_destroy
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_gl_bo *bo;
+};
+
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
@@ -2248,6 +2256,66 @@ void wined3d_cs_emit_surface_flip(struct wined3d_cs *cs, struct wined3d_surface
     cs->ops->submit(cs, sizeof(*op));
 }
 
+static UINT wined3d_cs_exec_bo_init(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_bo_init_destroy *op = data;
+    struct wined3d_context *context = context_acquire(cs->device, NULL);
+    const struct wined3d_gl_info *gl_info = context->gl_info;
+    struct wined3d_gl_bo *bo = op->bo;
+
+    GL_EXTCALL(glGenBuffersARB(1, &bo->name));
+    if (bo->type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
+        context_invalidate_state(context, STATE_INDEXBUFFER);
+    GL_EXTCALL(glBindBufferARB(bo->type_hint, bo->name));
+    GL_EXTCALL(glBufferDataARB(bo->type_hint, bo->size, NULL, bo->usage));
+    GL_EXTCALL(glBindBufferARB(bo->type_hint, 0));
+    checkGLcall("Create buffer object");
+
+    /* Temporary flush until map calls are moved into the cs. */
+    gl_info->gl_ops.gl.p_glFlush();
+
+    context_release(context);
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_bo_init(struct wined3d_cs *cs, struct wined3d_gl_bo *bo)
+{
+    struct wined3d_cs_bo_init_destroy *op;
+
+    op = cs->ops->require_space_prio(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_BO_INIT;
+    op->bo = bo;
+
+    cs->ops->submit_prio(cs, sizeof(*op));
+    cs->ops->finish_prio(cs);
+}
+
+static UINT wined3d_cs_exec_bo_destroy(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_bo_init_destroy *op = data;
+    struct wined3d_context *context = context_acquire(cs->device, NULL);
+    const struct wined3d_gl_info *gl_info = context->gl_info;
+
+    GL_EXTCALL(glDeleteBuffersARB(1, &op->bo->name));
+    checkGLcall("glDeleteBuffersARB");
+    context_release(context);
+
+    HeapFree(GetProcessHeap(), 0, op->bo);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_bo_destroy(struct wined3d_cs *cs, struct wined3d_gl_bo *bo)
+{
+    struct wined3d_cs_bo_init_destroy *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_BO_DESTROY;
+    op->bo = bo;
+
+    cs->ops->submit(cs, sizeof(*op));
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                    */ wined3d_cs_exec_nop,
@@ -2310,6 +2378,8 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_UPDATE_TEXTURE         */ wined3d_cs_exec_update_texture,
     /* WINED3D_CS_OP_EVICT_RESOURCE         */ wined3d_cs_exec_evict_resource,
     /* WINED3D_CS_OP_SURFACE_FLIP           */ wined3d_cs_exec_surface_flip,
+    /* WINED3D_CS_OP_BO_INIT                */ wined3d_cs_exec_bo_init,
+    /* WINED3D_CS_OP_BO_DESTROY             */ wined3d_cs_exec_bo_destroy,
 };
 
 static inline void *_wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size, BOOL prio)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 28a425f..7615566 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -4887,12 +4887,10 @@ LRESULT device_process_message(struct wined3d_device *device, HWND window, BOOL
         return CallWindowProcA(proc, window, message, wparam, lparam);
 }
 
-/* Context activation is done by the caller */
 struct wined3d_gl_bo *wined3d_device_get_bo(struct wined3d_device *device, UINT size, GLenum gl_usage,
-        GLenum type_hint, struct wined3d_context *context)
+        GLenum type_hint)
 {
     struct wined3d_gl_bo *ret;
-    const struct wined3d_gl_info *gl_info;
 
     TRACE("device %p, size %u, gl_usage %u, type_hint %u\n", device, size, gl_usage,
             type_hint);
@@ -4904,38 +4902,15 @@ struct wined3d_gl_bo *wined3d_device_get_bo(struct wined3d_device *device, UINT
     ret->size = size;
     ret->usage = gl_usage;
 
-    gl_info = context->gl_info;
-
-    GL_EXTCALL(glGenBuffersARB(1, &ret->name));
-    if (type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
-        context_invalidate_state(context, STATE_INDEXBUFFER);
-    GL_EXTCALL(glBindBufferARB(type_hint, ret->name));
-    GL_EXTCALL(glBufferDataARB(type_hint, size, NULL, gl_usage));
-    GL_EXTCALL(glBindBufferARB(type_hint, 0));
-    checkGLcall("Create buffer object");
+    wined3d_cs_emit_bo_init(device->cs, ret);
 
     TRACE("Successfully created and set up buffer %u\n", ret->name);
     return ret;
 }
 
-/* Context activation is done by the caller */
-static void wined3d_device_destroy_bo(struct wined3d_device *device, const struct wined3d_context *context,
-        struct wined3d_gl_bo *bo)
-{
-    const struct wined3d_gl_info *gl_info = context->gl_info;
-    TRACE("device %p, bo %p, GL bo %u\n", device, bo, bo->name);
-
-    GL_EXTCALL(glDeleteBuffersARB(1, &bo->name));
-    checkGLcall("glDeleteBuffersARB");
-
-    HeapFree(GetProcessHeap(), 0, bo);
-}
-
-/* Context activation is done by the caller */
-void wined3d_device_release_bo(struct wined3d_device *device, struct wined3d_gl_bo *bo,
-        const struct wined3d_context *context)
+void wined3d_device_release_bo(struct wined3d_device *device, struct wined3d_gl_bo *bo)
 {
     TRACE("device %p, bo %p, GL bo %u\n", device, bo, bo->name);
 
-    wined3d_device_destroy_bo(device, context, bo);
+    wined3d_cs_emit_bo_destroy(device->cs, bo);
 }
diff --git a/dlls/wined3d/volume.c b/dlls/wined3d/volume.c
index b1c31c5..4a616e9 100644
--- a/dlls/wined3d/volume.c
+++ b/dlls/wined3d/volume.c
@@ -357,14 +357,13 @@ void wined3d_volume_load(struct wined3d_volume *volume, struct wined3d_context *
     }
 }
 
-/* Context activation is done by the caller. */
-static void wined3d_volume_prepare_pbo(struct wined3d_volume *volume, struct wined3d_context *context)
+static void wined3d_volume_prepare_pbo(struct wined3d_volume *volume)
 {
     if (volume->resource.buffer)
         return;
 
     volume->resource.buffer = wined3d_device_get_bo(volume->resource.device,
-            volume->resource.size, GL_STREAM_DRAW_ARB, GL_PIXEL_UNPACK_BUFFER_ARB, context);
+            volume->resource.size, GL_STREAM_DRAW_ARB, GL_PIXEL_UNPACK_BUFFER_ARB);
     volume->resource.map_buffer = volume->resource.buffer;
     if (!volume->resource.buffer)
         ERR("Failed to create buffer for volume %p\n", volume);
@@ -375,14 +374,11 @@ static void wined3d_volume_prepare_pbo(struct wined3d_volume *volume, struct win
 static void wined3d_volume_free_pbo(struct wined3d_volume *volume)
 {
     struct wined3d_device *device = volume->resource.device;
-    struct wined3d_context *context = context_acquire(device, NULL);
 
     TRACE("Deleting PBO %u belonging to volume %p.\n", volume->resource.buffer->name, volume);
-    wined3d_device_release_bo(device, volume->resource.buffer, context);
+    wined3d_device_release_bo(device, volume->resource.buffer);
     volume->resource.buffer = NULL;
     volume->resource.map_buffer = NULL;
-
-    context_release(context);
 }
 
 static BOOL volume_prepare_system_memory(struct wined3d_volume *volume)
@@ -556,10 +552,11 @@ HRESULT CDECL wined3d_volume_map(struct wined3d_volume *volume,
 
     if (volume->flags & WINED3D_VFLAG_PBO)
     {
+        wined3d_volume_prepare_pbo(volume);
+
         context = context_acquire(device, NULL);
         gl_info = context->gl_info;
 
-        wined3d_volume_prepare_pbo(volume, context);
         if (flags & WINED3D_MAP_DISCARD)
             wined3d_volume_validate_location(volume, WINED3D_LOCATION_BUFFER);
         else
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index dcb7419..59916d4 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -1997,9 +1997,8 @@ void device_invalidate_shader_constants(const struct wined3d_device *device, DWO
 void device_exec_update_texture(struct wined3d_context *context, struct wined3d_texture *src_texture,
         struct wined3d_texture *dst_texture) DECLSPEC_HIDDEN;
 struct wined3d_gl_bo *wined3d_device_get_bo(struct wined3d_device *device, UINT size, GLenum gl_usage,
-        GLenum type_hint, struct wined3d_context *context) DECLSPEC_HIDDEN;
-void wined3d_device_release_bo(struct wined3d_device *device, struct wined3d_gl_bo *bo,
-        const struct wined3d_context *context) DECLSPEC_HIDDEN;
+        GLenum type_hint) DECLSPEC_HIDDEN;
+void wined3d_device_release_bo(struct wined3d_device *device, struct wined3d_gl_bo *bo) DECLSPEC_HIDDEN;
 
 
 static inline BOOL isStateDirty(const struct wined3d_context *context, DWORD state)
@@ -2648,6 +2647,8 @@ void wined3d_cs_emit_update_texture(struct wined3d_cs *cs, struct wined3d_textur
 void wined3d_cs_emit_evict_resource(struct wined3d_cs *cs, struct wined3d_resource *resource) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_surface_flip(struct wined3d_cs *cs, struct wined3d_surface *surface,
         struct wined3d_surface *override) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_bo_init(struct wined3d_cs *cs, struct wined3d_gl_bo *bo) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_bo_destroy(struct wined3d_cs *cs, struct wined3d_gl_bo *bo) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

