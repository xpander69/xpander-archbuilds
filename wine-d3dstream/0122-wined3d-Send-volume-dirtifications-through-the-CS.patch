From 5e128a0c10101ed5383391c8aaa1cecd95efffc0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Fri, 30 Aug 2013 19:18:04 +0200
Subject: [PATCH 122/127] wined3d: Send volume dirtifications through the CS
Reply-To: wine-devel <wine-devel@winehq.org>

This makes sure that the updates are inserted at the correct place in
the CS so that updates to the buffer or sysmem are transfered to the
texture at the right time.
---
 dlls/wined3d/cs.c              | 32 ++++++++++++++++++++++++++++++++
 dlls/wined3d/volume.c          | 16 +++++-----------
 dlls/wined3d/wined3d_private.h |  1 +
 3 files changed, 38 insertions(+), 11 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index d95dc71..a7b307f 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -88,6 +88,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_BO_MAP,
     WINED3D_CS_OP_BO_UNMAP,
     WINED3D_CS_OP_VOLUME_LOAD_LOCATION,
+    WINED3D_CS_OP_VOLUME_DIRTIFY,
     WINED3D_CS_OP_STOP,
 };
 
@@ -472,6 +473,11 @@ struct wined3d_cs_volume_load_location
     DWORD location;
 };
 
+struct wined3d_cs_volume_dirtify
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_volume *volume;
+};
 
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs, size_t size)
 {
@@ -2428,6 +2434,31 @@ void wined3d_cs_emit_volume_load_location(struct wined3d_cs *cs, struct wined3d_
     cs->ops->finish_prio(cs);
 }
 
+static UINT wined3d_cs_exec_volume_dirtify(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_volume_dirtify *op = data;
+
+    wined3d_texture_set_dirty(op->volume->container, TRUE);
+
+    if (op->volume->flags & WINED3D_VFLAG_PBO)
+        wined3d_volume_invalidate_location(op->volume, ~WINED3D_LOCATION_BUFFER);
+    else
+        wined3d_volume_invalidate_location(op->volume, ~WINED3D_LOCATION_SYSMEM);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_volume_dirtify(struct wined3d_cs *cs, struct wined3d_volume *volume)
+{
+    struct wined3d_cs_volume_dirtify *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_VOLUME_DIRTIFY;
+    op->volume = volume;
+
+    cs->ops->submit(cs, sizeof(*op));
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                    */ wined3d_cs_exec_nop,
@@ -2495,6 +2526,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_BO_MAP                 */ wined3d_cs_exec_bo_map,
     /* WINED3D_CS_OP_BO_UNMAP               */ wined3d_cs_exec_bo_unmap,
     /* WINED3D_CS_OP_VOLUME_LOAD_LOCATION   */ wined3d_cs_exec_volume_load_location,
+    /* WINED3D_CS_OP_VOLUME_DIRTIFY         */ wined3d_cs_exec_volume_dirtify,
 };
 
 static inline void *_wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size, BOOL prio)
diff --git a/dlls/wined3d/volume.c b/dlls/wined3d/volume.c
index 5912f49..5cbefb0 100644
--- a/dlls/wined3d/volume.c
+++ b/dlls/wined3d/volume.c
@@ -618,6 +618,7 @@ struct wined3d_volume * CDECL wined3d_volume_from_resource(struct wined3d_resour
 
 HRESULT CDECL wined3d_volume_unmap(struct wined3d_volume *volume)
 {
+    const struct wined3d_device *device = volume->resource.device;
     TRACE("volume %p.\n", volume);
 
     if (!(volume->flags & WINED3D_VFLAG_LOCKED))
@@ -626,18 +627,11 @@ HRESULT CDECL wined3d_volume_unmap(struct wined3d_volume *volume)
         return WINED3DERR_INVALIDCALL;
     }
 
-    if (volume->flags & WINED3D_VFLAG_DIRTIFY_ON_UNMAP)
-    {
-        wined3d_texture_set_dirty(volume->container, TRUE);
-
-        if (volume->flags & WINED3D_VFLAG_PBO)
-            wined3d_volume_invalidate_location(volume, ~WINED3D_LOCATION_BUFFER);
-        else
-            wined3d_volume_invalidate_location(volume, ~WINED3D_LOCATION_SYSMEM);
-    }
-
     if (volume->flags & WINED3D_VFLAG_PBO)
-        wined3d_cs_emit_bo_unmap(volume->resource.device->cs, volume->resource.map_buffer);
+        wined3d_cs_emit_bo_unmap(device->cs, volume->resource.map_buffer);
+
+    if (volume->flags & WINED3D_VFLAG_DIRTIFY_ON_UNMAP)
+        wined3d_cs_emit_volume_dirtify(device->cs, volume);
 
     volume->flags &= ~WINED3D_VFLAG_LOCKED;
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 7a41b8e..8b0994e 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2656,6 +2656,7 @@ BYTE *wined3d_cs_emit_bo_map(struct wined3d_cs *cs, const struct wined3d_gl_bo *
 void wined3d_cs_emit_bo_unmap(struct wined3d_cs *cs, struct wined3d_gl_bo *bo) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_volume_load_location(struct wined3d_cs *cs, struct wined3d_volume *volume,
         DWORD location) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_volume_dirtify(struct wined3d_cs *cs, struct wined3d_volume *volume) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

