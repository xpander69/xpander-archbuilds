From a1c154c3131f392c40bea55b472fa92189dcbc59 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 3 Apr 2013 18:01:34 +0200
Subject: [PATCH 024/127] wined3d: Wait for the cs before destroying objects
Reply-To: wine-devel <wine-devel@winehq.org>

This is to avoid destroying objects that are still referenced in
commands in the cs. Later patches will migrate resource destruction to
the CS.
---
 dlls/wined3d/buffer.c            | 6 ++++++
 dlls/wined3d/cs.c                | 2 ++
 dlls/wined3d/shader.c            | 5 +++++
 dlls/wined3d/surface.c           | 6 ++++++
 dlls/wined3d/texture.c           | 6 ++++++
 dlls/wined3d/vertexdeclaration.c | 5 +++++
 dlls/wined3d/volume.c            | 6 ++++++
 dlls/wined3d/wined3d_private.h   | 1 +
 8 files changed, 37 insertions(+)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index ce03fda..0e921df 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -561,6 +561,12 @@ ULONG CDECL wined3d_buffer_decref(struct wined3d_buffer *buffer)
 
     if (!refcount)
     {
+        if (wined3d_settings.cs_multithreaded)
+        {
+            FIXME("Waiting for cs.\n");
+            buffer->resource.device->cs->ops->finish(buffer->resource.device->cs);
+        }
+
         if (buffer->buffer_object)
         {
             context = context_acquire(buffer->resource.device, NULL);
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 3032e3f..7c7a0f7 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -347,6 +347,7 @@ static const struct wined3d_cs_ops wined3d_cs_mt_ops =
 {
     wined3d_cs_mt_require_space,
     wined3d_cs_flush_and_wait,
+    wined3d_cs_flush_and_wait,
 };
 
 static void wined3d_cs_st_submit(struct wined3d_cs *cs)
@@ -401,6 +402,7 @@ static const struct wined3d_cs_ops wined3d_cs_st_ops =
 {
     wined3d_cs_st_require_space,
     wined3d_cs_st_submit,
+    wined3d_cs_st_submit,
 };
 
 static DWORD WINAPI wined3d_cs_run(void *thread_param)
diff --git a/dlls/wined3d/shader.c b/dlls/wined3d/shader.c
index 8e1c245..244e84a 100644
--- a/dlls/wined3d/shader.c
+++ b/dlls/wined3d/shader.c
@@ -1736,6 +1736,11 @@ ULONG CDECL wined3d_shader_decref(struct wined3d_shader *shader)
 
     if (!refcount)
     {
+        if (wined3d_settings.cs_multithreaded)
+        {
+            FIXME("Waiting for cs.\n");
+            shader->device->cs->ops->finish(shader->device->cs);
+        }
         shader_cleanup(shader);
         shader->parent_ops->wined3d_object_destroyed(shader->parent);
         HeapFree(GetProcessHeap(), 0, shader);
diff --git a/dlls/wined3d/surface.c b/dlls/wined3d/surface.c
index 129141a..8c312a1 100644
--- a/dlls/wined3d/surface.c
+++ b/dlls/wined3d/surface.c
@@ -47,6 +47,12 @@ static void surface_cleanup(struct wined3d_surface *surface)
 
     TRACE("surface %p.\n", surface);
 
+    if (wined3d_settings.cs_multithreaded)
+    {
+        FIXME("Waiting for cs.\n");
+        surface->resource.device->cs->ops->finish(surface->resource.device->cs);
+    }
+
     if (surface->texture_name || (surface->flags & SFLAG_PBO)
              || surface->rb_multisample || surface->rb_resolved
              || !list_empty(&surface->renderbuffers))
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index 2b87dba..8ffee83 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -118,6 +118,12 @@ static void wined3d_texture_cleanup(struct wined3d_texture *texture)
 
     TRACE("texture %p.\n", texture);
 
+    if (wined3d_settings.cs_multithreaded)
+    {
+        FIXME("Waiting for cs.\n");
+        texture->resource.device->cs->ops->finish(texture->resource.device->cs);
+    }
+
     for (i = 0; i < sub_count; ++i)
     {
         struct wined3d_resource *sub_resource = texture->sub_resources[i];
diff --git a/dlls/wined3d/vertexdeclaration.c b/dlls/wined3d/vertexdeclaration.c
index cf5378c..3f4d5e4 100644
--- a/dlls/wined3d/vertexdeclaration.c
+++ b/dlls/wined3d/vertexdeclaration.c
@@ -56,6 +56,11 @@ ULONG CDECL wined3d_vertex_declaration_decref(struct wined3d_vertex_declaration
 
     if (!refcount)
     {
+        if (wined3d_settings.cs_multithreaded)
+        {
+            FIXME("Waiting for cs.\n");
+            declaration->device->cs->ops->finish(declaration->device->cs);
+        }
         HeapFree(GetProcessHeap(), 0, declaration->elements);
         declaration->parent_ops->wined3d_object_destroyed(declaration->parent);
         HeapFree(GetProcessHeap(), 0, declaration);
diff --git a/dlls/wined3d/volume.c b/dlls/wined3d/volume.c
index 814df93..89c8d83 100644
--- a/dlls/wined3d/volume.c
+++ b/dlls/wined3d/volume.c
@@ -473,6 +473,12 @@ ULONG CDECL wined3d_volume_decref(struct wined3d_volume *volume)
 
     if (!refcount)
     {
+        if (wined3d_settings.cs_multithreaded)
+        {
+            FIXME("Waiting for cs.\n");
+            volume->resource.device->cs->ops->finish(volume->resource.device->cs);
+        }
+
         if (volume->pbo)
             wined3d_volume_free_pbo(volume);
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 2f68ba9..08a41cf 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2493,6 +2493,7 @@ struct wined3d_cs_ops
 {
     void *(*require_space)(struct wined3d_cs *cs, size_t size);
     void (*submit)(struct wined3d_cs *cs);
+    void (*finish)(struct wined3d_cs *cs);
 };
 
 struct wined3d_cs
-- 
1.8.1.5

