From 879d92993648c95488209111b0ff69edbe3280ed Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 10 Apr 2013 16:43:08 +0200
Subject: [PATCH 061/127] wined3d: Send stream output updates through the
 command stream
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 48 +++++++++++++++++++++++++++++++++++-------
 dlls/wined3d/device.c          | 31 ++++++++++-----------------
 dlls/wined3d/wined3d_private.h |  2 ++
 3 files changed, 53 insertions(+), 28 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 7408402..0f75eba 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -62,6 +62,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_VS_SAMPLER,
     WINED3D_CS_OP_SET_PS_SAMPLER,
     WINED3D_CS_OP_SET_GS_SAMPLER,
+    WINED3D_CS_OP_SET_STREAM_OUTPUT,
     WINED3D_CS_OP_STOP,
 };
 
@@ -286,6 +287,13 @@ struct wined3d_cs_set_sampler
     struct wined3d_sampler *sampler;
 };
 
+struct wined3d_cs_set_stream_output
+{
+    enum wined3d_cs_op opcode;
+    UINT idx, offset;
+    struct wined3d_buffer *buffer;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -521,10 +529,6 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
 {
     const struct wined3d_cs_stateblock *op = data;
 
-    /* Don't memcpy the entire struct, we'll remove single items as we add dedicated
-     * ops for setting states */
-    memcpy(cs->state.stream_output, op->state.stream_output, sizeof(cs->state.stream_output));
-
     memcpy(cs->state.lights, op->state.lights, sizeof(cs->state.lights));
 
     return sizeof(*op);
@@ -537,10 +541,6 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
     op = cs->ops->require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_STATEBLOCK;
 
-    /* Don't memcpy the entire struct, we'll remove single items as we add dedicated
-     * ops for setting states */
-    memcpy(op->state.stream_output, state->stream_output, sizeof(op->state.stream_output));
-
     /* FIXME: This is not ideal. CS is still running synchronously, so this is ok.
      * It will go away soon anyway. */
     memcpy(op->state.lights, state->lights, sizeof(op->state.lights));
@@ -1494,6 +1494,37 @@ void wined3d_cs_emit_set_sampler(struct wined3d_cs *cs, UINT idx, struct wined3d
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_set_stream_output(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_stream_output *op = data;
+    struct wined3d_buffer *prev = cs->state.stream_output[op->idx].buffer;
+
+    if (op->buffer)
+        InterlockedIncrement(&op->buffer->resource.bind_count);
+
+    cs->state.stream_output[op->idx].buffer = op->buffer;
+    cs->state.stream_output[op->idx].offset = op->offset;
+
+    if (op->buffer)
+        InterlockedDecrement(&prev->resource.bind_count);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_set_stream_output(struct wined3d_cs *cs, UINT idx,
+        struct wined3d_buffer *buffer, UINT offset)
+{
+    struct wined3d_cs_set_stream_output *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SET_STREAM_OUTPUT;
+    op->idx = idx;
+    op->buffer = buffer;
+    op->offset = offset;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -1535,6 +1566,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_VS_SAMPLER         */ wined3d_cs_exec_set_vs_sampler,
     /* WINED3D_CS_OP_SET_PS_SAMPLER         */ wined3d_cs_exec_set_ps_sampler,
     /* WINED3D_CS_OP_SET_GS_SAMPLER         */ wined3d_cs_exec_set_gs_sampler,
+    /* WINED3D_CS_OP_SET_STREAM_OUTPUT      */ wined3d_cs_exec_set_stream_output,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index e56656b..378f8c2 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -1118,28 +1118,19 @@ void CDECL wined3d_device_set_stream_output(struct wined3d_device *device, UINT
     device->update_state->stream_output[idx].buffer = buffer;
     device->update_state->stream_output[idx].offset = offset;
 
-    if (device->recording)
-    {
-        if (buffer)
-            wined3d_buffer_incref(buffer);
-        if (prev_buffer)
-            wined3d_buffer_decref(prev_buffer);
+    if (prev_buffer == buffer)
         return;
-    }
 
-    if (prev_buffer != buffer)
-    {
-        if (buffer)
-        {
-            InterlockedIncrement(&buffer->resource.bind_count);
-            wined3d_buffer_incref(buffer);
-        }
-        if (prev_buffer)
-        {
-            InterlockedDecrement(&prev_buffer->resource.bind_count);
-            wined3d_buffer_decref(prev_buffer);
-        }
-    }
+    if (buffer)
+        wined3d_buffer_incref(buffer);
+
+    if (device->recording)
+        TRACE("Recording... not performing anything.\n");
+    else
+        wined3d_cs_emit_set_stream_output(device->cs, idx, buffer, offset);
+
+    if (prev_buffer)
+        wined3d_buffer_decref(prev_buffer);
 }
 
 struct wined3d_buffer * CDECL wined3d_device_get_stream_output(struct wined3d_device *device,
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 69691a0..8120ad3 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2572,6 +2572,8 @@ void wined3d_cs_emit_set_cb(struct wined3d_cs *cs, UINT idx, struct wined3d_buff
         enum wined3d_shader_type type) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_sampler(struct wined3d_cs *cs, UINT idx, struct wined3d_sampler *sampler,
         enum wined3d_shader_type type) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_set_stream_output(struct wined3d_cs *cs, UINT idx,
+        struct wined3d_buffer *buffer, UINT offset) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

