From 1fce88b37d3677a373ae3490c21eeaefd0911596 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 10 Apr 2013 16:25:47 +0200
Subject: [PATCH 059/127] wined3d: Send sampler updates through the command
 stream
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/wined3d/cs.c              | 74 ++++++++++++++++++++++++++++++++++++------
 dlls/wined3d/device.c          | 18 ++++++++++
 dlls/wined3d/wined3d_private.h |  2 ++
 3 files changed, 84 insertions(+), 10 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index b444feb..b3fd9bb 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -58,6 +58,9 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SET_VS_CB,
     WINED3D_CS_OP_SET_PS_CB,
     WINED3D_CS_OP_SET_GS_CB,
+    WINED3D_CS_OP_SET_VS_SAMPLER,
+    WINED3D_CS_OP_SET_PS_SAMPLER,
+    WINED3D_CS_OP_SET_GS_SAMPLER,
     WINED3D_CS_OP_STOP,
 };
 
@@ -275,6 +278,13 @@ struct wined3d_cs_set_cb
     struct wined3d_buffer *buffer;
 };
 
+struct wined3d_cs_set_sampler
+{
+    enum wined3d_cs_op opcode;
+    UINT idx;
+    struct wined3d_sampler *sampler;
+};
+
 static CRITICAL_SECTION wined3d_cs_list_mutex;
 static CRITICAL_SECTION_DEBUG wined3d_cs_list_mutex_debug =
 {
@@ -514,12 +524,7 @@ static UINT wined3d_cs_exec_transfer_stateblock(struct wined3d_cs *cs, const voi
      * ops for setting states */
     memcpy(cs->state.stream_output, op->state.stream_output, sizeof(cs->state.stream_output));
 
-    memcpy(cs->state.vs_sampler, op->state.vs_sampler, sizeof(cs->state.vs_sampler));
-
     cs->state.geometry_shader = op->state.geometry_shader;
-    memcpy(cs->state.gs_sampler, op->state.gs_sampler, sizeof(cs->state.gs_sampler));
-
-    memcpy(cs->state.ps_sampler, op->state.ps_sampler, sizeof(cs->state.ps_sampler));
 
     memcpy(cs->state.lights, op->state.lights, sizeof(cs->state.lights));
 
@@ -537,12 +542,7 @@ void wined3d_cs_emit_transfer_stateblock(struct wined3d_cs *cs, const struct win
      * ops for setting states */
     memcpy(op->state.stream_output, state->stream_output, sizeof(op->state.stream_output));
 
-    memcpy(op->state.vs_sampler, state->vs_sampler, sizeof(op->state.vs_sampler));
-
     op->state.geometry_shader = state->geometry_shader;
-    memcpy(op->state.gs_sampler, state->gs_sampler, sizeof(op->state.gs_sampler));
-
-    memcpy(op->state.ps_sampler, state->ps_sampler, sizeof(op->state.ps_sampler));
 
     /* FIXME: This is not ideal. CS is still running synchronously, so this is ok.
      * It will go away soon anyway. */
@@ -1425,6 +1425,57 @@ void wined3d_cs_emit_set_cb(struct wined3d_cs *cs, UINT idx, struct wined3d_buff
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_set_vs_sampler(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_sampler *op = data;
+
+    cs->state.vs_sampler[op->idx] = op->sampler;
+
+    return sizeof(*op);
+}
+
+static UINT wined3d_cs_exec_set_ps_sampler(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_sampler *op = data;
+
+    cs->state.ps_sampler[op->idx] = op->sampler;
+
+    return sizeof(*op);
+}
+
+static UINT wined3d_cs_exec_set_gs_sampler(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_set_sampler *op = data;
+
+    cs->state.gs_sampler[op->idx] = op->sampler;
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_set_sampler(struct wined3d_cs *cs, UINT idx, struct wined3d_sampler *sampler,
+        enum wined3d_shader_type type)
+{
+    struct wined3d_cs_set_sampler *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    switch (type)
+    {
+        case WINED3D_SHADER_TYPE_VERTEX:
+            op->opcode = WINED3D_CS_OP_SET_VS_SAMPLER;
+            break;
+        case WINED3D_SHADER_TYPE_PIXEL:
+            op->opcode = WINED3D_CS_OP_SET_PS_SAMPLER;
+            break;
+        case WINED3D_SHADER_TYPE_GEOMETRY:
+            op->opcode = WINED3D_CS_OP_SET_GS_SAMPLER;
+            break;
+    }
+    op->idx = idx;
+    op->sampler = sampler;
+
+    cs->ops->submit(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                  */ wined3d_cs_exec_fence,
@@ -1462,6 +1513,9 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SET_VS_CB              */ wined3d_cs_exec_set_vs_cb,
     /* WINED3D_CS_OP_SET_PS_CB              */ wined3d_cs_exec_set_ps_cb,
     /* WINED3D_CS_OP_SET_GS_CB              */ wined3d_cs_exec_set_gs_cb,
+    /* WINED3D_CS_OP_SET_VS_SAMPLER         */ wined3d_cs_exec_set_vs_sampler,
+    /* WINED3D_CS_OP_SET_PS_SAMPLER         */ wined3d_cs_exec_set_ps_sampler,
+    /* WINED3D_CS_OP_SET_GS_SAMPLER         */ wined3d_cs_exec_set_gs_sampler,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 954ced0..5144a8d 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -2147,8 +2147,14 @@ void CDECL wined3d_device_set_vs_sampler(struct wined3d_device *device, UINT idx
     prev = device->update_state->vs_sampler[idx];
     device->update_state->vs_sampler[idx] = sampler;
 
+    if (prev == sampler)
+        return;
+
     if (sampler)
         wined3d_sampler_incref(sampler);
+
+    wined3d_cs_emit_set_sampler(device->cs, idx, sampler, WINED3D_SHADER_TYPE_VERTEX);
+
     if (prev)
         wined3d_sampler_decref(prev);
 }
@@ -2416,8 +2422,14 @@ void CDECL wined3d_device_set_ps_sampler(struct wined3d_device *device, UINT idx
     prev = device->update_state->ps_sampler[idx];
     device->update_state->ps_sampler[idx] = sampler;
 
+    if (prev == sampler)
+        return;
+
     if (sampler)
         wined3d_sampler_incref(sampler);
+
+    wined3d_cs_emit_set_sampler(device->cs, idx, sampler, WINED3D_SHADER_TYPE_PIXEL);
+
     if (prev)
         wined3d_sampler_decref(prev);
 }
@@ -2666,8 +2678,14 @@ void CDECL wined3d_device_set_gs_sampler(struct wined3d_device *device, UINT idx
     prev = device->update_state->gs_sampler[idx];
     device->update_state->gs_sampler[idx] = sampler;
 
+    if (sampler == prev)
+        return;
+
     if (sampler)
         wined3d_sampler_incref(sampler);
+
+    wined3d_cs_emit_set_sampler(device->cs, idx, sampler, WINED3D_SHADER_TYPE_GEOMETRY);
+
     if (prev)
         wined3d_sampler_decref(prev);
 }
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 673e1a4..c2d672f 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2569,6 +2569,8 @@ void wined3d_cs_emit_set_primitive_type(struct wined3d_cs *cs,
         GLenum primitive_type) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_cb(struct wined3d_cs *cs, UINT idx, struct wined3d_buffer *buffer,
         enum wined3d_shader_type type) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_set_sampler(struct wined3d_cs *cs, UINT idx, struct wined3d_sampler *sampler,
+        enum wined3d_shader_type type) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
1.8.1.5

